-- Generated by LuaSTG Editor Sharp X 0.74.3
-- Mod name: 
_author = "Monodenounment Studios"
_mod_version = 4096
_allow_practice = true
_allow_sc_practice = true
spelldata = {}
function math.lerp(a,b,x)
	return a + (b - a) * x
end
function GD(e,n,h,l,ex,ph) -- by zino_lath
	local t = {e,n,h,l,ex or 0,ph or 0}
	return t[lstg.var.difficulty]
end
SetSplash(true)
-- MenuInputChecker
    function MenuInputChecker(name)
        while(true) do
            while(not KeyIsPressed(name))do
                coroutine.yield(false) --return false until the key is pressed
            end
            coroutine.yield(true) --return true once
            for i=0, 20 do
                coroutine.yield(false) --return false for 30 frames
                if (not KeyIsDown(name)) then
                    break --if the key is not being held down, break out of for (which will make you consequently restart
                end
            end
            while (KeyIsDown(name)) do
                coroutine.yield(true) -- return true once every 3 frames
                for i=0, 2 do
                    coroutine.yield(false) --return false for 3 frames
                end
            end
        end
    end

-- SetWorldUEX
    function SetWorldUEX(x, y, w, h, bound, m)
    	bound = bound or 32
    	m = m or 15
    	OriginalSetWorld(
    	--l,r,b,t,
    			(-w / 2), (w / 2), (-h / 2), (h / 2),
    	--bl,br,bb,bt
    			(-w / 2) - bound, (w / 2) + bound, (-h / 2) - bound, (h / 2) + bound,
    	--sl,sr,sb,st
    			(x - w/2), (x + w/2), (y - h/2), (y + h/2),
    	--pl,pr,pb,pt
    			(-w / 2), (w / 2), (-h / 2), (h / 2),
    	--world mask
    			m
    	)
    	SetBound(lstg.world.boundl, lstg.world.boundr, lstg.world.boundb, lstg.world.boundt)
    end

-- Wrap
    function Wrap(x, x_min, x_max)
    	return (((x - x_min) % (x_max - x_min)) + (x_max - x_min)) % (x_max - x_min) + x_min;
    end

-- Clamp
    function Clamp(val, lower, upper)
        assert(val and lower and upper, "not very useful error message here")
        if lower > upper then lower, upper = upper, lower end -- swap if boundaries supplied the wrong way
        return math.max(lower, math.min(upper, val))
    end

-- Interpolation
    function LerpDecel(a, b, x)
        local y = 1 - x
        return (a + (1 - y * y) * (b - a))
    end
    
    function Lerp(a, b, t)
        return a + (b - a) * t
    end

-- Format Score
    function FormatScore(num)
        local str = string.format('%09d', num)
        return string.format('%s,%s,%s',
                str:sub(1,3), str:sub(4,6),str:sub(7,9))
    end

Include'Vector.lua'
lstg.LoadFont('font:'..'TTKP','font\\TTKP.fnt',true)
--- Load Font Image "TTKP"
lstg.LoadFont('font:'..'LTCarpet','font\\LTCarpet.fnt',false)
--- Load Font Image "LTCarpet"
-- archive space: SHADER\
LoadFX('fx:'..'alpha_mask','SHADER\\alpha_mask.fx')
CreateRenderTarget("RenderTarget")
CreateRenderTarget("Mask")
CreateRenderTarget("BombEf")
CreateRenderTarget("3DTest")
-- rendertarget size setting
local rt_w, rt_h = 1280, 1280

-- init
CreateRenderTarget('rt:yeah', rt_w, rt_h)
LoadImage('img:yeah', 'rt:yeah', 0, 0, rt_w, rt_h)
-- archive space: 
-- archive space: TITLE\
_LoadImageFromFile('image:'..'MainMenuBackground','TITLE\\MainMenuBackground.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'MainMenuLogo','TITLE\\MainMenuLogo.png',false,0,0,false,0)
_LoadImageGroupFromFile('image:'..'MainMenuSelections_','TITLE\\MainMenuSelections_.png',true,1,8,0,0,false)
_LoadImageFromFile('image:'..'MainMenuSelectionsShadow','TITLE\\MainMenuSelectionsShadow.png',true,0,0,false,0)
do
    SetImageState("image:MainMenuSelectionsShadow","",Color(155,255,255,255))
end
_LoadImageFromFile('image:'..'MainMenuHarae','TITLE\\MainMenuHarae.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'MainMenuScroller','TITLE\\MainMenuScroller.png',true,0,0,false,0)
do
    SetImageState("image:MainMenuScroller","mul+rev",Color(75,255,255,255))
end
_LoadImageFromFile('image:'..'MainMenuSpinner','TITLE\\MainMenuSpinner.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'MainMenuGradient','TITLE\\MainMenuGradient.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'MainMenuCopyright','TITLE\\MainMenuCopyright.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'MainMenuRGB','TITLE\\MainMenuRGB.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'MainMenuSpellHeader','TITLE\\MainMenuSpellHeader.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'MainMenuDifficultyHeader','TITLE\\MainMenuDifficultyHeader.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'MainMenuDifficultyShadow','TITLE\\MainMenuDifficultyShadow.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'MainMenuDifficultyHalo','TITLE\\MainMenuDifficultyHalo.png',true,0,0,false,0)
_LoadImageGroupFromFile('image:'..'MainMenuDifficultyLabels','TITLE\\MainMenuDifficultyLabels.png',true,1,4,0,0,false)
_LoadImageGroupFromFile('image:'..'MainMenuPlayerBanners_','TITLE\\MainMenuPlayerBanners_.png',true,5,1,0,0,false)
_LoadImageGroupFromFile('image:'..'MainMenuCharShadow_','TITLE\\MainMenuCharShadow_.png',true,5,1,0,0,false)
_LoadImageFromFile('image:'..'MainMenuPortrait_1','TITLE\\MainMenuPortrait_1.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'MainMenuPortrait_2','TITLE\\MainMenuPortrait_2.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'MainMenuPortrait_3','TITLE\\MainMenuPortrait_3.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'MainMenuPortrait_4','TITLE\\MainMenuPortrait_4.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'MainMenuPortrait_5','TITLE\\MainMenuPortrait_5.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'MainMenuPlayerHeader','TITLE\\MainMenuPlayerHeader.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'MainMenuScroller2','TITLE\\MainMenuScroller2.png',true,0,0,false,0)
do
    SetImageState("image:MainMenuScroller2","mul+rev",Color(150,255,255,255))
end
_LoadImageFromFile('image:'..'MainMenuBlackHole_1','TITLE\\MainMenuBlackHole_1.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'MainMenuBlackHole_2','TITLE\\MainMenuBlackHole_2.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'MainMenuScroller3','TITLE\\MainMenuScroller3.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'HUDBorder','TITLE\\HUDBorder.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'HUDLabelInfo','TITLE\\HUDLabelInfo.png',true,0,0,false,0)
_LoadImageGroupFromFile('image:'..'HUDDifficultyLabels','TITLE\\HUDDifficultyLabels.png',true,1,6,0,0,false)
_LoadImageFromFile('image:'..'HUDTint','TITLE\\HUDTint.png',true,0,0,false,0)
-- archive space: 
-- archive space: PLAYER\
-- archive space: PLAYER\REIMU\
_LoadImageFromFile('image:'..'r_arml','PLAYER\\REIMU\\r_arml.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'r_armr','PLAYER\\REIMU\\r_armr.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'r_broom','PLAYER\\REIMU\\r_broom.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'r_hair','PLAYER\\REIMU\\r_hair.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'r_hat','PLAYER\\REIMU\\r_hat.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'r_hattop','PLAYER\\REIMU\\r_hattop.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'r_legl','PLAYER\\REIMU\\r_legl.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'r_legr','PLAYER\\REIMU\\r_legr.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'r_skirt','PLAYER\\REIMU\\r_skirt.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'r_torso','PLAYER\\REIMU\\r_torso.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'r_waist_ribbon','PLAYER\\REIMU\\r_waist_ribbon.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'Hakkero','PLAYER\\REIMU\\Hakkero.png',true,0,0,false,0)
ReimuWigNode=(64)
_LoadImageGroupFromFile('image:'..'r_wig','PLAYER\\REIMU\\r_wig.png',true,1,ReimuWigNode,0,0,false)
SetTextureSamplerState("image:r_wig", "linear+wrap")
_LoadImageFromFile('image:'..'r_shot','PLAYER\\REIMU\\r_shot.png',true,0,0,false,0)
do
    SetImageState("image:r_shot","mul+add",Color(200,255,255,255))
end
_LoadImageFromFile('image:'..'r_shot2','PLAYER\\REIMU\\r_shot2.png',true,0,0,false,0)
do
    SetImageState("image:r_shot2","mul+add",Color(125,255,255,255))
end
_LoadImageFromFile('image:'..'r_shot2ef','PLAYER\\REIMU\\r_shot2ef.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'r_shotef','PLAYER\\REIMU\\r_shotef.png',true,0,0,false,0)
_LoadImageFromFile('image:'..'r_border','PLAYER\\REIMU\\r_border.png',false,0,0,false,0)
_LoadImageFromFile('image:'..'r_amulet','PLAYER\\REIMU\\r_amulet.png',true,0,0,false,0)
-- archive space: 
_LoadImageFromFile('image:'..'BombCutin','BombCutin.png',true,0,0,false,0)
-- archive space: 
-- archive space: ENEMY\
_LoadImageFromFile('image:'..'BulletShadow','ENEMY\\BulletShadow.png',true,0,0,false,0)
for _=1,18 do
    do
        print(_LoadImageFromFile('image:fairy' .. _ .. '_arml','ENEMY\\fairy' .. _ .. '\\fairy' .. _ .. '_arml.png',true,0,0,false,0))
        _LoadImageFromFile('image:fairy' .. _ .. '_armr','ENEMY\\fairy' .. _ .. '\\fairy' .. _ .. '_armr.png',true,0,0,false,0)
        _LoadImageFromFile('image:fairy' .. _ .. '_body','ENEMY\\fairy' .. _ .. '\\fairy' .. _ .. '_body.png',true,0,0,false,0)
        _LoadImageFromFile('image:fairy' .. _ .. '_head','ENEMY\\fairy' .. _ .. '\\fairy' .. _ .. '_head.png',true,0,0,false,0)
        _LoadImageFromFile('image:fairy' .. _ .. '_legs','ENEMY\\fairy' .. _ .. '\\fairy' .. _ .. '_legs.png',true,0,0,false,0)
        _LoadImageFromFile('image:fairy' .. _ .. '_wingl','ENEMY\\fairy' .. _ .. '\\fairy' .. _ .. '_wingl.png',true,0,0,false,0)
        _LoadImageFromFile('image:fairy' .. _ .. '_wingr','ENEMY\\fairy' .. _ .. '\\fairy' .. _ .. '_wingr.png',true,0,0,false,0)
    end
end
-- archive space: 
_editor_class["MainMenuBG"]=Class(_object)
_editor_class["MainMenuBG"].init=function(self,_x,_y,_)
    self.x,self.y=_x,_y
    self.img="image:MainMenuBackground"
    self.layer=LAYER_BG-5
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=false
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
    self.hscale, self.vscale = 1/2.25, 1/2.25
    self.x,self.y=screen.width/2, screen.height/2
end
_editor_class["MainMenuBG"].render=function(self)
    SetViewMode'ui'
    self.class.base.render(self)
    SetViewMode'world'
end
local particle = require("particle")
_editor_class["MainMenuParticle"]=Class(_object)
_editor_class["MainMenuParticle"].init=function(self,_x,_y,_)
    self.x,self.y=_x,_y
    self.img="img_void"
    self.layer=LAYER_TOP+5
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=false
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
end
_editor_class["MainMenuParticle"].render=function(self)
    SetViewMode'ui'
    SetViewMode'world'
end
_editor_class["MainMenu3D"]=Class(_object)
_editor_class["MainMenu3D"].init=function(self,_x,_y,_)
    self.x,self.y=_x,_y
    self.img="img_void"
    self.layer=LAYER_TOP+5
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=false
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
end
_editor_class["MainMenu3D"].render=function(self)
    -- render
    PushRenderTarget('rt:yeah')
    SetViewport(0, rt_w, 0, rt_h)
    SetScissorRect(0, rt_w, 0, rt_h)
    SetPerspective( -- settings to change how the Thing renders
        --== camera position ==--
        -- x position.
        0,
        -- y position.
        0,
        -- z position.
        -10,
    
        --== camera target position ==--
        -- probably not a good idea to touch this
        0, 0, 0,
    
        --== up vector ==--
        -- x component (side-to-side tilt)
        0,
        -- y component (upwards straightness)
        1,
        -- z component (forwards tilt)
        0,
    
        --== misc variables ==--
        -- vertical field of view. setting this higher will make the view narrower.
        0.72,
        -- aspect ratio. automatically handled, do not touch.
        rt_w / rt_h,
        -- z near plane. probably not a good idea to touch this
        0.1,
        -- z far plane. probably not a good idea to touch this
        40
    )
    SetFog()
    RenderClear(Color(0))
    lstg.Render3D('image:MainMenuLogo', 0, 0, 0, self.timer, self.timer, self.timer, 0.003, 0.003)
    PopRenderTarget()
    SetViewMode('ui')
    Render('img:yeah', 600, 200, 0, 1, 1)
end
_editor_class["MainMenuMain"]=Class(_object)
_editor_class["MainMenuMain"].init=function(self,_x,_y,_)
    self.x,self.y=_x,_y
    self.img="img_void"
    self.layer=LAYER_TOP
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=false
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
    MainMenuRef = self
    self.index = 1
    self.shadowPos = { x = 170, y = 350 - 33 }
    self.yOffset = 0
    self.spinWheelAdd = 0
    self.spinWheelStaticAdd = 0
    self.spinWheelStaticDelay = 0
    self.spinWheelRot = 0
    self.lastRot = 2
    self.imgx = screen.width / 2
    self.imgy = screen.height / 2
    self.fadeIn = 255
    self.yAnim = 480
    self.logoScale = 0.2
    self.shadowRGB = {0, 255, 255, 255}
    self.canvasX = 0
    self.canvasY = 0
    self.canvasIndex = 0
    self.interactDelay = 0
    self.isSpellPractice = false
    
    self.selections = {
    	{ alpha = 255, scale = 1, color = {255, 158+20, 195+20, 255} },
    	{ alpha = 255, scale = 1, color = {255, 130+20, 142+20, 255} },
    	{ alpha = 255, scale = 1, color = {255, 110+10, 105+10, 255} },
    	{ alpha = 255, scale = 1, color = {255, 90+10, 71+10, 211} },
    	{ alpha = 255, scale = 1, color = {255, 66+10, 51+10, 211} },
    	{ alpha = 255, scale = 1, color = {255, 55+10, 40+10, 211} },
    	{ alpha = 255, scale = 1, color = {255, 40+5, 25+5, 185} },
    	{ alpha = 255, scale = 1, color = {255, 30+5, 15+5, 185} },
    }
    _object.set_color(self,"",255,255,255,255)
    last=New(_editor_class["MainMenuDifficulty"],self.x,self.y,_)
    last=New(_editor_class["MainMenuPlayer"],self.x,self.y,_)
    last=New(_editor_class["MainMenuHaraeAnim"],self.x,self.y,_)
    last=New(_editor_class["MainMenuOptions"],self.x,self.y,_)
    last=New(_editor_class["MainMenuSpell"],self.x,self.y,_)
    last=New(_editor_class["MainMenuParticle"],self.x,self.y,_)
    lasttask=task.New(self,function()
        do
            local _beg_logoScale=0.2 local logoScale=_beg_logoScale  local _w_logoScale=0 local _end_logoScale=1 local _d_w_logoScale=90/(60*2.5-1)
            for _=1,60*2.5 do
                self.logoScale = logoScale
                task._Wait(1)
                _w_logoScale=_w_logoScale+_d_w_logoScale logoScale=(_end_logoScale-_beg_logoScale)*sin(_w_logoScale)+(_beg_logoScale)
            end
        end
    end)
    lasttask=task.New(self,function()
        do
            local _beg_fade=255 local fade=_beg_fade  local _w_fade=0 local _end_fade=0 local _d_w_fade=90/(45-1)
            for _=1,45 do
                self.fadeIn = fade
                task._Wait(1)
                _w_fade=_w_fade+_d_w_fade fade=(_end_fade-_beg_fade)*sin(_w_fade)+(_beg_fade)
            end
        end
    end)
    lasttask=task.New(self,function()
        do
            local _h_yOffset=(7-(-7))/2 local _t_yOffset=(7+(-7))/2 local yOffset=_h_yOffset*sin(0)+_t_yOffset local _w_yOffset=0 local _d_w_yOffset=1.75
            for _=1,_infinite do
                self.yOffset = yOffset
                task._Wait(3)
                _w_yOffset=_w_yOffset+_d_w_yOffset yOffset=_h_yOffset*sin(_w_yOffset)+_t_yOffset
            end
        end
    end)
    lasttask=task.New(self,function()
        do
            local _beg_yAnim=480 local yAnim=_beg_yAnim  local _w_yAnim=-90 local _end_yAnim=0 local _d_w_yAnim=180/(60*2-1)
            for _=1,60*2 do
                self.yAnim = yAnim
                task._Wait(1)
                _w_yAnim=_w_yAnim+_d_w_yAnim yAnim=(_end_yAnim-_beg_yAnim)/2*sin(_w_yAnim)+((_end_yAnim+_beg_yAnim)/2)
            end
        end
    end)
    lasttask=task.New(self,function()
        do
            local _h_colorChange=(100-(0))/2 local _t_colorChange=(100+(0))/2 local colorChange=_h_colorChange*sin(0)+_t_colorChange local _w_colorChange=0 local _d_w_colorChange=1.5
            for _=1,_infinite do
                SetImageState("image:MainMenuHarae","",Color(255,255 - colorChange,255 - colorChange,255))
                task._Wait(1)
                _w_colorChange=_w_colorChange+_d_w_colorChange colorChange=_h_colorChange*sin(_w_colorChange)+_t_colorChange
            end
        end
    end)
    lasttask=task.New(self,function()
        do
            local _beg_alpha=0 local alpha=_beg_alpha  local _w_alpha=-90 local _end_alpha=255 local _d_w_alpha=180/(60*1.5-1)
            for _=1,60*1.5 do
                SetImageState("image:MainMenuGradient","",Color(alpha,255,255,255))
                SetImageState("image:MainMenuSpinner","",Color(alpha,255,255,255))
                task._Wait(1)
                _w_alpha=_w_alpha+_d_w_alpha alpha=(_end_alpha-_beg_alpha)/2*sin(_w_alpha)+((_end_alpha+_beg_alpha)/2)
            end
        end
    end)
end
_editor_class["MainMenuMain"].frame=function(self)
    for _=1,8 do
        if self.index == _ then
            self.selections[_].alpha = LerpDecel(self.selections[_].alpha, 255, 0.1)
            self.selections[_].scale = LerpDecel(self.selections[_].scale, 1.1, 0.1)
        else
            self.selections[_].alpha = LerpDecel(self.selections[_].alpha, 100, 0.1)
            self.selections[_].scale = LerpDecel(self.selections[_].scale, 1.4, 0.1)
        end
    end
    if self.canvasIndex == 0 then
    	if is_up_held and self.timer >= 60 * 2.5 then
    		self.index = Wrap(self.index - 1, 1, 9)
    		PlaySound("select00",0.1,0,false)
    		self.spinWheelAdd = 10
    		self.spinWheelStaticDelay = 60
    		self.lastRot = 1
    	end
    	
    	if is_down_held and self.timer >= 60 * 2.5 then
    		self.index = Wrap(self.index + 1, 1, 9)
    		PlaySound("select00",0.1,0,false)
    		self.spinWheelAdd = -10
    		self.spinWheelStaticDelay = 60
    		self.lastRot = 2
    	end
    	
    	if KeyIsPressed"shoot" and self.timer >= 60*2.5 and self.canvasIndex == 0 then
    		self.interactDelay = 5
    		PlaySound("ok00",0.1,self.x/256,false)
    		New(_editor_class["MainMenuSelectionsPopup"],
    		185 + self.canvasX,
    		350 - (33 * self.index) + self.yOffset + self.yAnim + self.canvasY,
    		"image:MainMenuSelections_" .. self.index,
    		self.selections[self.index].scale - 0.7)
    		
    		self.canvasIndex = self.index
    		if self.index == 8 then
    			stage.QuitGame()
    		end
    	end
    end
    
    self.spinWheelAdd = LerpDecel(self.spinWheelAdd, 0, 0.1)
    self.shadowPos.y = LerpDecel(self.shadowPos.y, 350 - (33 * self.index), 0.1)
    self.spinWheelRot = self.spinWheelRot + self.spinWheelAdd + self.spinWheelStaticAdd
    
    if self.canvasIndex == 0 then
    	for i = 1, 4 do
    		self.shadowRGB[i] = LerpDecel(self.shadowRGB[i], self.selections[self.index].color[i], 0.05)
    	end
    else
    	self.shadowRGB[1] = LerpDecel(self.shadowRGB[1], 0, 0.05)
    	for i = 2, 4 do
    		self.shadowRGB[i] = LerpDecel(self.shadowRGB[i], self.selections[self.index].color[i], 0.05)
    	end
    end
    
    self.spinWheelStaticDelay = self.spinWheelStaticDelay - 1
    if self.spinWheelStaticDelay <= 0 then
    	if self.lastRot == 1 then
    		self.spinWheelStaticAdd = LerpDecel(self.spinWheelStaticAdd, 2, 0.005)
    	else
    		self.spinWheelStaticAdd = LerpDecel(self.spinWheelStaticAdd, -2, 0.005)
    	end
    end
    if self.spinWheelStaticDelay > 0 then
    	self.spinWheelStaticAdd = 0
    end
    
    if self.canvasIndex == 0 then
    	self.canvasX = LerpDecel(self.canvasX, 0, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, 0, 0.05)
    elseif self.canvasIndex == 1 then
    	self.canvasX = LerpDecel(self.canvasX, -854, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, 0, 0.05)
    elseif self.canvasIndex == 2 then
    	self.canvasX = LerpDecel(self.canvasX, -854, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, 480, 0.05)
    elseif self.canvasIndex == 3 then
    	self.canvasX = LerpDecel(self.canvasX, -854, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, -480, 0.05)
    elseif self.canvasIndex == 4 then
    	self.canvasX = LerpDecel(self.canvasX, 854, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, 0, 0.05)
    elseif self.canvasIndex == 5 then
    	self.canvasX = LerpDecel(self.canvasX, 0, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, -480, 0.05)
    elseif self.canvasIndex == 6 then
    	self.canvasX = LerpDecel(self.canvasX, 0, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, 480, 0.05)
    elseif self.canvasIndex == 9 then
    	self.canvasX = LerpDecel(self.canvasX, -854, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, 0, 0.05)
    elseif self.canvasIndex == 99 then
    	self.canvasX = LerpDecel(self.canvasX, -854, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, 0, 0.05)
    else
    	self.canvasX = LerpDecel(self.canvasX, 0, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, 0, 0.05)
    end
    
    self.imgx = self.imgx + 0.2
    self.imgy = self.imgy + 0.2
    if self.interactDelay > 0 then
    	self.interactDelay = self.interactDelay - 1
    end
    self.class.base.frame(self)
end
_editor_class["MainMenuMain"].render=function(self)
    SetViewMode'ui'
    self.class.base.render(self)
    Render("image:MainMenuGradient",screen.width / 2, screen.height / 2,0,1/2.25, 1/2.25,0.5)
    Render("image:MainMenuSpinner",screen.width/2, screen.height/2,self.timer * 0.05,1/2.25, 1/2.25,0.5)
    local w, h = GetTextureSize("image:MainMenuScroller")
    w, h = w * 0.4, h * 0.4
    for i = -int((screen.width + 16 + self.imgx) / w + 0.5), int((screen.width + 16 - self.imgx) / w + 0.5) do
    	for j = -int((screen.height + 16 + self.imgy) / h + 0.5), int((screen.height + 16 - self.imgy) / h + 0.5) do
    		Render("image:MainMenuScroller", self.imgx + i * w, self.imgy + j * h, 0, 0.4, 0.4)
    	end
    end
    SetImageState("image:MainMenuRGB","mul+add",Color(self.shadowRGB[1],self.shadowRGB[2],self.shadowRGB[3],self.shadowRGB[4]))
    Render("image:MainMenuRGB",screen.width / 2, screen.height / 2,0,1/2.25, 1/2.25,0.5)
    if self.timer >= 60*2.5 + 3 then
        Render("image:MainMenuSelectionsShadow",self.shadowPos.x + self.canvasX, self.shadowPos.y + self.yOffset + self.yAnim + self.canvasY,0,1/2.25 - 0.1, 1/2.25 - 0.1,0.5)
        Render("image:MainMenuHarae",self.shadowPos.x - 120 + self.canvasX, self.shadowPos.y + self.yOffset + self.yAnim + self.canvasY,self.spinWheelRot,1/2.25 - 0.275, 1/2.25 - 0.275,0.5)
    end
    for _=1,8 do
        SetImageState("image:MainMenuSelections_" .. _,"",Color(self.selections[_].alpha,255,255,255))
        Render("image:MainMenuSelections_" .. _,185 + self.canvasX, 350 - (33 * _) + self.yOffset + self.yAnim + self.canvasY,0,1/2.25 - 0.1 * self.selections[_].scale, 1/2.25 - 0.1 * self.selections[_].scale,0.5)
    end
    Render("image:MainMenuLogo",600 + self.canvasX, 390 - self.yAnim + self.yOffset + self.canvasY,0,(1/2.25 - 0.2) * self.logoScale, (1/2.25 - 0.2) * self.logoScale,0.5)
    Render("image:MainMenuCopyright",screen.width / 2 + self.canvasX, 30 - self.yAnim + self.yOffset + self.canvasY,0,1/2.25 - 0.25, 1/2.25 - 0.25,0.5)
    SetImageState("white","",Color(self.fadeIn,0,0,0))
    Render("white",screen.width / 2, screen.height / 2,0,854,480,0.5)
    SetImageState("white","",Color(255,255,255,255))
    SetViewMode'ui'
end
_editor_class["MainMenuHaraeAnim"]=Class(_object)
_editor_class["MainMenuHaraeAnim"].init=function(self,_x,_y,_)
    self.x,self.y=_x,_y
    self.img="image:MainMenuHarae"
    self.layer=LAYER_TOP+56
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=false
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
    self.x, self.y = 854 + 100, 480 + 100
    _object.set_color(self,"",0,255,255,255)
    self.hscale, self.vscale = 0,0
    lasttask=task.New(self,function()
        task.CRMoveTo(60*2.5,MOVE_ACC_DEC,740, 480-60, 280, 480, 0, 480-40, 170-121, 350-28)
        PlaySound("hyz_chargeup",0.1,self.x/256,false)
        do
            local _beg_alpha=255 local alpha=_beg_alpha  local _w_alpha=-90 local _end_alpha=0 local _d_w_alpha=90/(15-1)
            for _=1,15 do
                _object.set_color(self,"",alpha,255,255,255)
                task._Wait(1)
                _w_alpha=_w_alpha+_d_w_alpha alpha=(_end_alpha-_beg_alpha)*sin(_w_alpha)+(_end_alpha)
            end
        end
        _del(self,true)
    end)
    lasttask=task.New(self,function()
        do
            local _beg_alpha=0 local alpha=_beg_alpha  local _w_alpha=0 local _end_alpha=255 local _d_w_alpha=90/(60*2.5-1)
            for _=1,60*2.5 do
                _object.set_color(self,"",alpha,255,255,255)
                task._Wait(1)
                _w_alpha=_w_alpha+_d_w_alpha alpha=(_end_alpha-_beg_alpha)*sin(_w_alpha)+(_beg_alpha)
            end
        end
    end)
    lasttask=task.New(self,function()
        do
            local _beg_scale=0 local scale=_beg_scale  local _w_scale=-90 local _end_scale=0.6 local _d_w_scale=90/(60-1)
            for _=1,60 do
                self.hscale, self.vscale = scale, scale
                task._Wait(1)
                _w_scale=_w_scale+_d_w_scale scale=(_end_scale-_beg_scale)*sin(_w_scale)+(_end_scale)
            end
        end
        do
            local _beg_scale=0.6 local scale=_beg_scale  local _w_scale=0 local _end_scale=1/2.25 - 0.275 local _d_w_scale=90/(60*1.5-1)
            for _=1,60*1.5 do
                self.hscale, self.vscale = scale, scale
                task._Wait(1)
                _w_scale=_w_scale+_d_w_scale scale=(_end_scale-_beg_scale)*sin(_w_scale)+(_beg_scale)
            end
        end
        do
            local _beg_scale=1/2.25 - 0.275 local scale=_beg_scale  local _w_scale=-90 local _end_scale=1/2.25 local _d_w_scale=90/(25-1)
            for _=1,25 do
                self.hscale, self.vscale = scale, scale
                task._Wait(1)
                _w_scale=_w_scale+_d_w_scale scale=(_end_scale-_beg_scale)*sin(_w_scale)+(_end_scale)
            end
        end
    end)
    lasttask=task.New(self,function()
        do
            local _beg_rot=0 local rot=_beg_rot  local _w_rot=-90 local _end_rot=15 local _d_w_rot=90/(60*1-1)
            for _=1,60*1 do
                self.rot = self.rot + rot
                task._Wait(1)
                _w_rot=_w_rot+_d_w_rot rot=(_end_rot-_beg_rot)*sin(_w_rot)+(_end_rot)
            end
        end
        do
            local _beg_rot=15 local rot=_beg_rot  local _w_rot=-90 local _end_rot=0 local _d_w_rot=90/(60*1.5-1)
            for _=1,60*1.5 do
                self.rot = self.rot + rot
                task._Wait(1)
                _w_rot=_w_rot+_d_w_rot rot=(_end_rot-_beg_rot)*sin(_w_rot)+(_end_rot)
            end
        end
    end)
end
_editor_class["MainMenuHaraeAnim"].render=function(self)
    SetViewMode'ui'
    self.class.base.render(self)
    SetViewMode'world'
end
_editor_class["MainMenuDifficulty"]=Class(_object)
_editor_class["MainMenuDifficulty"].init=function(self,_x,_y,_)
    self.x,self.y=_x,_y
    self.img="img_void"
    self.layer=LAYER_TOP
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=false
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
    self.canvasX = 854
    self.canvasY = 0
    self.shadowRot = 0
    self.shadowCol = {255, 255, 255, 255}
    self.shadowColTarget = {
    	{ 190, 21, 61, 36 },
    	{ 190, 21, 35, 61 },
    	{ 190, 61, 24, 21 },
    	{ 190, 55, 21, 61 }
    }
    self.index = 1
    self.shadowRotAdd = 0
    self.labels = {
    	{x = 0, y = 0, scale = 1, alpha = 255},
    	{x = 0, y = 0, scale = 1, alpha = 255},
    	{x = 0, y = 0, scale = 1, alpha = 255},
    	{x = 0, y = 0, scale = 1, alpha = 255},
    }
    self.masterAlpha = 255
    self.altPos = false
    lasttask=task.New(self,function()
        do
            local _h_angleAdd=(5-(-5))/2 local _t_angleAdd=(5+(-5))/2 local angleAdd=_h_angleAdd*sin(0)+_t_angleAdd local _w_angleAdd=0 local _d_w_angleAdd=1.5
            for _=1,_infinite do
                self.shadowRotAdd = angleAdd
                task._Wait(1)
                _w_angleAdd=_w_angleAdd+_d_w_angleAdd angleAdd=_h_angleAdd*sin(_w_angleAdd)+_t_angleAdd
            end
        end
    end)
end
_editor_class["MainMenuDifficulty"].frame=function(self)
    if MainMenuRef.canvasIndex == 1 then
    	self.canvasX = LerpDecel(self.canvasX, 0, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, 0, 0.05)
    elseif self.altPos == true then
    	self.canvasX = LerpDecel(self.canvasX, -854, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, 0, 0.05)
    else
    	self.canvasX = LerpDecel(self.canvasX, 854, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, 0, 0.05)
    end
    
    if MainMenuRef.canvasIndex == 1 then
    	if KeyIsPressed"shoot" and MainMenuRef.interactDelay == 0 then
    		PlaySound("ok00",0.1,self.x/256,false)
    		lstg.var.difficulty = self.index
    		MainMenuRef.interactDelay = 5
    		MainMenuRef.canvasIndex = 9
    		self.altPos = true
    		New(_editor_class["MainMenuDifficultyPopup"],
    		self.labels[self.index].x + self.canvasX, 
    		self.labels[self.index].y + self.canvasY + MainMenuRef.yOffset,
    		"image:MainMenuDifficultyLabels" .. self.index,
    		1/2.25 * self.labels[self.index].scale)
    	end
    
    	if KeyIsPressed"spell" then
    		if MainMenuRef.isSpellPractice == true then
    			MainMenuRef.canvasIndex = 4
    		else
    			MainMenuRef.canvasIndex = 0
    		end
    		self.altPos = false
    		MainMenuRef.interactDelay = 5
    		PlaySound("cancel00",0.1,self.x/256,false)
    	end
    	
    	if is_up_held or is_left_held then
    		self.index = Wrap(self.index - 1, 1, 5)
    		PlaySound("select00",0.1,0,false)
    	end
    	
    	if is_down_held or is_right_held then
    		self.index = Wrap(self.index + 1, 1, 5)
    		PlaySound("select00",0.1,0,false)
    	end
    end
    
    if self.index == 1 then
    	self.shadowRot = LerpDecel(self.shadowRot, -5, 0.1)
    	for i = 1, 4 do
    		self.shadowCol[i] = LerpDecel(self.shadowCol[i], self.shadowColTarget[self.index][i], 0.1)
    	end
    elseif self.index == 2 then
    	self.shadowRot = LerpDecel(self.shadowRot, -10, 0.1)
    	for i = 1, 4 do
    		self.shadowCol[i] = LerpDecel(self.shadowCol[i], self.shadowColTarget[self.index][i], 0.1)
    	end
    elseif self.index == 3 then
    	self.shadowRot = LerpDecel(self.shadowRot, -15, 0.1)
    	for i = 1, 4 do
    		self.shadowCol[i] = LerpDecel(self.shadowCol[i], self.shadowColTarget[self.index][i], 0.1)
    	end
    elseif self.index == 4 then
    	self.shadowRot = LerpDecel(self.shadowRot, -20, 0.1)
    	for i = 1, 4 do
    		self.shadowCol[i] = LerpDecel(self.shadowCol[i], self.shadowColTarget[self.index][i], 0.1)
    	end
    end
    
    if MainMenuRef.canvasIndex ~= 1 then
    	self.masterAlpha = LerpDecel(self.masterAlpha, 255, 0.1)
    else
    	self.masterAlpha = LerpDecel(self.masterAlpha, 0, 0.1)
    end
    	
    
    if self.index == 1 then
    	self.labels[1].x = LerpDecel(self.labels[1].x, screen.width/2, 0.1)
    	self.labels[1].y = LerpDecel(self.labels[1].y, screen.height/2 - 20, 0.1)
    	self.labels[1].scale = LerpDecel(self.labels[1].scale, 0.8, 0.1)
    	self.labels[1].alpha = LerpDecel(self.labels[1].alpha, 255, 0.1)
    	--
    	self.labels[2].x = LerpDecel(self.labels[2].x, screen.width/2 + 150, 0.1)
    	self.labels[2].y = LerpDecel(self.labels[2].y, screen.height/2 - 20 - 150, 0.1)
    	self.labels[2].scale = LerpDecel(self.labels[2].scale, 0.4, 0.1)
    	self.labels[2].alpha = LerpDecel(self.labels[2].alpha, 155, 0.1)
    	
    	self.labels[3].x = LerpDecel(self.labels[3].x, screen.width/2 + 150*2, 0.1)
    	self.labels[3].y = LerpDecel(self.labels[3].y, screen.height/2 - 20 - 150*2, 0.1)
    	self.labels[3].scale = LerpDecel(self.labels[3].scale, 0.4, 0.1)
    	self.labels[3].alpha = LerpDecel(self.labels[3].alpha, 155, 0.1)
    	
    	self.labels[4].x = LerpDecel(self.labels[4].x, screen.width/2 + 150*3, 0.1)
    	self.labels[4].y = LerpDecel(self.labels[4].y, screen.height/2 - 20 - 150*3, 0.1)
    	self.labels[4].scale = LerpDecel(self.labels[4].scale, 0.4, 0.1)
    	self.labels[4].alpha = LerpDecel(self.labels[4].alpha, 155, 0.1)
    	
    elseif self.index == 2 then
    	self.labels[1].x = LerpDecel(self.labels[1].x, screen.width/2 - 150, 0.1)
    	self.labels[1].y = LerpDecel(self.labels[1].y, screen.height/2 - 20 + 150, 0.1)
    	self.labels[1].scale = LerpDecel(self.labels[1].scale, 0.4, 0.1)
    	self.labels[1].alpha = LerpDecel(self.labels[1].alpha, 155, 0.1)
    	--
    	self.labels[2].x = LerpDecel(self.labels[2].x, screen.width/2, 0.1)
    	self.labels[2].y = LerpDecel(self.labels[2].y, screen.height/2 - 20, 0.1)
    	self.labels[2].scale = LerpDecel(self.labels[2].scale, 0.8, 0.1)
    	self.labels[2].alpha = LerpDecel(self.labels[2].alpha, 255, 0.1)
    	--
    	self.labels[3].x = LerpDecel(self.labels[3].x, screen.width/2 + 150, 0.1)
    	self.labels[3].y = LerpDecel(self.labels[3].y, screen.height/2 - 20 - 150, 0.1)
    	self.labels[3].scale = LerpDecel(self.labels[3].scale, 0.4, 0.1)
    	self.labels[3].alpha = LerpDecel(self.labels[3].alpha, 155, 0.1)
    	
    	self.labels[4].x = LerpDecel(self.labels[4].x, screen.width/2 + 150*2, 0.1)
    	self.labels[4].y = LerpDecel(self.labels[4].y, screen.height/2 - 20 - 150*2, 0.1)
    	self.labels[4].scale = LerpDecel(self.labels[4].scale, 0.4, 0.1)
    	self.labels[4].alpha = LerpDecel(self.labels[4].alpha, 155, 0.1)
    elseif self.index == 3 then
    	self.labels[1].x = LerpDecel(self.labels[1].x, screen.width/2 - 150*2, 0.1)
    	self.labels[1].y = LerpDecel(self.labels[1].y, screen.height/2 - 20 + 150*2, 0.1)
    	self.labels[1].scale = LerpDecel(self.labels[1].scale, 0.4, 0.1)
    	self.labels[1].alpha = LerpDecel(self.labels[1].alpha, 155, 0.1)
    	
    	self.labels[2].x = LerpDecel(self.labels[2].x, screen.width/2 - 150, 0.1)
    	self.labels[2].y = LerpDecel(self.labels[2].y, screen.height/2 - 20 + 150, 0.1)
    	self.labels[2].scale = LerpDecel(self.labels[2].scale, 0.4, 0.1)
    	self.labels[2].alpha = LerpDecel(self.labels[2].alpha, 155, 0.1)
    	--
    	self.labels[3].x = LerpDecel(self.labels[3].x, screen.width/2, 0.1)
    	self.labels[3].y = LerpDecel(self.labels[3].y, screen.height/2 - 20, 0.1)
    	self.labels[3].scale = LerpDecel(self.labels[3].scale, 0.8, 0.1)
    	self.labels[3].alpha = LerpDecel(self.labels[3].alpha, 255, 0.1)
    	--
    	self.labels[4].x = LerpDecel(self.labels[4].x, screen.width/2 + 150, 0.1)
    	self.labels[4].y = LerpDecel(self.labels[4].y, screen.height/2 - 20 - 150, 0.1)
    	self.labels[4].scale = LerpDecel(self.labels[4].scale, 0.4, 0.1)
    	self.labels[4].alpha = LerpDecel(self.labels[4].alpha, 155, 0.1)
    else
    	self.labels[1].x = LerpDecel(self.labels[1].x, screen.width/2 - 150*3, 0.1)
    	self.labels[1].y = LerpDecel(self.labels[1].y, screen.height/2 - 20 + 150*3, 0.1)
    	self.labels[1].scale = LerpDecel(self.labels[1].scale, 0.4, 0.1)
    	self.labels[1].alpha = LerpDecel(self.labels[1].alpha, 155, 0.1)
    	
    	self.labels[2].x = LerpDecel(self.labels[2].x, screen.width/2 - 150*2, 0.1)
    	self.labels[2].y = LerpDecel(self.labels[2].y, screen.height/2 - 20 + 150*2, 0.1)
    	self.labels[2].scale = LerpDecel(self.labels[2].scale, 0.4, 0.1)
    	self.labels[2].alpha = LerpDecel(self.labels[2].alpha, 155, 0.1)
    	
    	self.labels[3].x = LerpDecel(self.labels[3].x, screen.width/2 - 150, 0.1)
    	self.labels[3].y = LerpDecel(self.labels[3].y, screen.height/2 - 20 + 150, 0.1)
    	self.labels[3].scale = LerpDecel(self.labels[3].scale, 0.4, 0.1)
    	self.labels[3].alpha = LerpDecel(self.labels[3].alpha, 155, 0.1)
    	--
    	self.labels[4].x = LerpDecel(self.labels[4].x, screen.width/2, 0.1)
    	self.labels[4].y = LerpDecel(self.labels[4].y, screen.height/2 - 20, 0.1)
    	self.labels[4].scale = LerpDecel(self.labels[4].scale, 0.8, 0.1)
    	self.labels[4].alpha = LerpDecel(self.labels[4].alpha, 255, 0.1)
    end
    self.class.base.frame(self)
end
_editor_class["MainMenuDifficulty"].render=function(self)
    SetViewMode'ui'
    self.class.base.render(self)
    SetImageState("image:MainMenuDifficultyHalo","",Color(self.shadowCol[1],self.shadowCol[2],self.shadowCol[3],self.shadowCol[4]))
    Render("image:MainMenuDifficultyHalo",screen.width/2 + self.canvasX, screen.height/2 + self.canvasY,0,1/2.25,1/2.25,0.5)
    Render("image:MainMenuDifficultyHeader",screen.width / 2 + self.canvasX, 400 + MainMenuRef.yOffset + self.canvasY,0,1/2.25 - 0.2,1/2.25 - 0.2,0.5)
    SetImageState("image:MainMenuDifficultyShadow","",Color(self.shadowCol[1],self.shadowCol[2],self.shadowCol[3],self.shadowCol[4]))
    Render("image:MainMenuDifficultyShadow",screen.width/2 + self.canvasX, screen.height/2 - 20 + self.canvasY + MainMenuRef.yOffset,self.shadowRot + self.shadowRotAdd,1/2.25 - 0.2, 1/2.25 - 0.2,0.5)
    for _=1,4 do
        SetImageState("image:MainMenuDifficultyLabels" .. _,"",Color(self.labels[_].alpha - self.masterAlpha,255,255,255))
        Render("image:MainMenuDifficultyLabels" .. _,self.labels[_].x + self.canvasX, self.labels[_].y + self.canvasY + MainMenuRef.yOffset,0,1/2.25 * self.labels[_].scale, 1/2.25 * self.labels[_].scale,0.5)
    end
    SetViewMode'world'
end
_editor_class["MainMenuDifficultyPopup"]=Class(_object)
_editor_class["MainMenuDifficultyPopup"].init=function(self,_x,_y,img, scale)
    self.x,self.y=_x,_y
    self.img=img
    self.layer=LAYER_TOP
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=false
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
    self.hscale, self.vscale = scale, scale
    self.alpha = 255
    self.alphaTarget = 240
    lasttask=task.New(self,function()
        do
            local _beg_size=scale local size=_beg_size  local _w_size=0 local _end_size=0.2 local _d_w_size=90/(30-1)
            for _=1,30 do
                self.hscale, self.vscale = size, size
                task._Wait(1)
                _w_size=_w_size+_d_w_size size=(_end_size-_beg_size)*sin(_w_size)+(_beg_size)
            end
        end
    end)
end
_editor_class["MainMenuDifficultyPopup"].frame=function(self)
    if KeyIsPressed"spell" then
    	self.alphaTarget = 0
    end
    
    self.alpha = LerpDecel(self.alpha, self.alphaTarget, 0.2)
    self.x = LerpDecel(self.x, screen.width/2, 0.06)
    self.y = LerpDecel(self.y, 55, 0.06)
    if self.alpha <= 1 then Del(self) end
    _object.set_color(self,"",self.alpha,255,255,255)
    self.class.base.frame(self)
end
_editor_class["MainMenuDifficultyPopup"].render=function(self)
    SetViewMode'ui'
    self.class.base.render(self)
    SetViewMode'world'
end
_editor_class["MainMenuPlayer"]=Class(_object)
_editor_class["MainMenuPlayer"].init=function(self,_x,_y,_)
    self.x,self.y=_x,_y
    self.img="img_void"
    self.layer=LAYER_TOP
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=false
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
    self.canvasX = 854 * 2
    self.canvasY = 0
    self.index = 1
    self.playerSel = {
    	{scaleX = 1, alpha = 250},
    	{scaleX = 1, alpha = 250},
    	{scaleX = 1, alpha = 250},
    	{scaleX = 1, alpha = 250},
    }
    self.tmpScaleX = 0
end
_editor_class["MainMenuPlayer"].frame=function(self)
     if MainMenuRef.canvasIndex == 9 then
    	if KeyIsPressed"shoot" and MainMenuRef.interactDelay == 0 then
    		PlaySound("ok00",0.1,self.x/256,false)
    		PlaySound("boon01",0.1,self.x/256,false)
    		New(_editor_class["MainMenuTransitioner"],0,0,_)
    		lstg.var.player_name = "Reimu"
    		MainMenuRef.interactDelay = 9999
    		MainMenuRef.canvasIndex = 99
    		New(_editor_class["MainMenuBlackHole"],0,0,_)
    	end
    
    	if KeyIsPressed"spell" and MainMenuRef.interactDelay == 0 then
    		PlaySound("cancel00",0.1,self.x/256,false)
    		MainMenuRef.canvasIndex = 1
    	end
    	
    	if is_up_held or is_left_held and MainMenuRef.interactDelay == 0 then
    		self.index = Wrap(self.index - 1, 1, 5)
    		PlaySound("select00",0.1,0,false)
    	end
    	
    	if is_down_held or is_right_held and MainMenuRef.interactDelay == 0 then
    		self.index = Wrap(self.index + 1, 1, 5)
    		PlaySound("select00",0.1,0,false)
    	end
    end
    
    if MainMenuRef.canvasIndex == 9 then
    	self.canvasX = LerpDecel(self.canvasX, 0, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, 0, 0.05)
    elseif MainMenuRef.canvasIndex == 1 then
    	self.canvasX = LerpDecel(self.canvasX, 854, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, 0, 0.05)
    elseif MainMenuRef.canvasIndex == 99 then
    	self.canvasX = LerpDecel(self.canvasX, -854, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, 0, 0.05)
    else
    	self.canvasX = LerpDecel(self.canvasX, 854*2, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, 0, 0.05)
    end
    
    self.tmpScaleX = self.playerSel[self.index].scaleX
    self.tmpAlpha = self.playerSel[self.index].alpha
    
    self.playerSel[1].scaleX = LerpDecel(self.playerSel[1].scaleX, 0, 0.1)
    self.playerSel[2].scaleX = LerpDecel(self.playerSel[2].scaleX, 0, 0.1)
    self.playerSel[3].scaleX = LerpDecel(self.playerSel[3].scaleX, 0, 0.1)
    self.playerSel[4].scaleX = LerpDecel(self.playerSel[4].scaleX, 0, 0.1)
    self.playerSel[1].alpha = LerpDecel(self.playerSel[1].alpha, 0, 0.1)
    self.playerSel[2].alpha = LerpDecel(self.playerSel[2].alpha, 0, 0.1)
    self.playerSel[3].alpha = LerpDecel(self.playerSel[3].alpha, 0, 0.1)
    self.playerSel[4].alpha = LerpDecel(self.playerSel[4].alpha, 0, 0.1)
    
    self.playerSel[self.index].scaleX = LerpDecel(self.tmpScaleX, 1, 0.1)
    self.playerSel[self.index].alpha = LerpDecel(self.tmpAlpha, 255, 0.1)
    --self.tmpScaleX = self.playerSel[self.index].scaleX
    self.class.base.frame(self)
end
_editor_class["MainMenuPlayer"].render=function(self)
    SetViewMode'ui'
    self.class.base.render(self)
    for _=1,4 do
        SetImageState("image:MainMenuCharShadow_" .. _,"",Color(self.playerSel[_].alpha - 100,255,255,255))
    end
    for _=1,4 do
        if self.index ~= _ then
            Render("image:MainMenuCharShadow_" .. _,screen.width/2 + self.canvasX, screen.height/2 + self.canvasY,0,1/2.25,1/2.25,0.5)
        else
        end
    end
    Render("image:MainMenuCharShadow_" .. self.index,screen.width/2 + self.canvasX, screen.height/2 + self.canvasY,0,1/2.25,1/2.25,0.5)
    --[[ -------------------------------------------]]
    
    Render("image:MainMenuPlayerHeader",screen.width / 2 + self.canvasX, 400 + MainMenuRef.yOffset + self.canvasY,0,1/2.25 - 0.2,1/2.25 - 0.2,0.5)
    for _=1,4 do
        SetImageState("image:MainMenuPlayerBanners_" .. _,"",Color(self.playerSel[_].alpha,255,255,255))
    end
    for _=1,4 do
        if self.index ~= _ then
            Render("image:MainMenuPlayerBanners_" .. _,screen.width/2 + 180 + self.canvasX, screen.height/2 - 35 + self.canvasY + MainMenuRef.yOffset,0,(1/2.25 - 0.25) * self.playerSel[_].scaleX,1/2.25 - 0.25,0.5)
        else
        end
    end
    Render("image:MainMenuPlayerBanners_" .. self.index,screen.width/2 + 180 + self.canvasX, screen.height/2 - 35 + self.canvasY + MainMenuRef.yOffset,0,(1/2.25 - 0.25) * self.playerSel[self.index].scaleX,1/2.25 - 0.25,0.5)
    --[[ -------------------------------------------]]
    
    for _=1,4 do
        SetImageState("image:MainMenuPortrait_" .. _,"",Color(self.playerSel[_].alpha,255,255,255))
    end
    for _=1,4 do
        if self.index ~= _ then
            Render("image:MainMenuPortrait_" .. _,screen.width/2 - 180 + self.canvasX, screen.height/2 + self.canvasY + MainMenuRef.yOffset,0,(1/2.25 - 0.3) * self.playerSel[_].scaleX,1/2.25 - 0.3,0.5)
        else
        end
    end
    Render("image:MainMenuPortrait_" .. self.index,screen.width/2 - 180 + self.canvasX, screen.height/2 + self.canvasY + MainMenuRef.yOffset,0,(1/2.25 - 0.3) * self.playerSel[self.index].scaleX,1/2.25 - 0.3,0.5)
    SetViewMode'world'
end
_editor_class["MainMenuSelectionsPopup"]=Class(_object)
_editor_class["MainMenuSelectionsPopup"].init=function(self,_x,_y,img, scale)
    self.x,self.y=_x,_y
    self.img=img
    self.layer=LAYER_TOP+5
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=false
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
    self.hscale, self.vscale = 0,0
    _object.set_color(self,"",0,255,255,255)
    lasttask=task.New(self,function()
        do
            local _beg_size=scale local size=_beg_size  local _w_size=0 local _end_size=scale + 0.2 local _d_w_size=90/(15-1)
            for _=1,15 do
                self.hscale, self.vscale = size, size
                task._Wait(1)
                _w_size=_w_size+_d_w_size size=(_end_size-_beg_size)*sin(_w_size)+(_beg_size)
            end
        end
    end)
    lasttask=task.New(self,function()
        do
            local _beg_alpha=255 local alpha=_beg_alpha  local _w_alpha=0 local _end_alpha=0 local _d_w_alpha=90/(15-1)
            for _=1,15 do
                _object.set_color(self,"",alpha,255,255,255)
                task._Wait(1)
                _w_alpha=_w_alpha+_d_w_alpha alpha=(_end_alpha-_beg_alpha)*sin(_w_alpha)+(_beg_alpha)
            end
        end
        _del(self,true)
    end)
end
_editor_class["MainMenuSelectionsPopup"].render=function(self)
    SetViewMode'ui'
    self.class.base.render(self)
    SetViewMode'world'
end
_editor_class["MainMenuTransitioner"]=Class(_object)
_editor_class["MainMenuTransitioner"].init=function(self,_x,_y,_)
    self.x,self.y=_x,_y
    self.img="img_void"
    self.layer=LAYER_TOP+99
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=false
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
    self.imgx = screen.width / 2
    self.imgy = -480 * 2
    self.faderVal = 0
    self.sizeDiff = 0.1
    self.haraeAlpha = 0
    lasttask=task.New(self,function()
        do
            local _beg_siz=0.15 local siz=_beg_siz  local _w_siz=0 local _end_siz=-0.2 local _d_w_siz=90/(60-1)
            for _=1,60 do
                self.sizeDiff = siz
                task._Wait(1)
                _w_siz=_w_siz+_d_w_siz siz=(_end_siz-_beg_siz)*sin(_w_siz)+(_beg_siz)
            end
        end
    end)
    lasttask=task.New(self,function()
        do
            local _beg_fader=0 local fader=_beg_fader  local _w_fader=0 local _end_fader=255 local _d_w_fader=90/(60-1)
            for _=1,60 do
                self.faderVal = fader
                task._Wait(1)
                _w_fader=_w_fader+_d_w_fader fader=(_end_fader-_beg_fader)*sin(_w_fader)+(_beg_fader)
            end
        end
        task._Wait(60)
        if MainMenuRef.isSpellPractice == false then
        	stage.group.Start(stage.groups["GameGroup"], 0)
        else
        	stage.IsSCpractice = true--判定进入符卡练习的flag add by OLC
        	stage.group.PracticeStart('Spell Practice@Spell Practice')
        end
    end)
    lasttask=task.New(self,function()
        do
            local _beg_alpha=0 local alpha=_beg_alpha  local _w_alpha=0 local _end_alpha=255 local _d_w_alpha=90/(30-1)
            for _=1,30 do
                self.haraeAlpha = alpha
                task._Wait(1)
                _w_alpha=_w_alpha+_d_w_alpha alpha=(_end_alpha-_beg_alpha)*sin(_w_alpha)+(_beg_alpha)
            end
        end
        do
            local _beg_alpha=255 local alpha=_beg_alpha  local _w_alpha=0 local _end_alpha=0 local _d_w_alpha=90/(20-1)
            for _=1,20 do
                self.haraeAlpha = alpha
                task._Wait(1)
                _w_alpha=_w_alpha+_d_w_alpha alpha=(_end_alpha-_beg_alpha)*sin(_w_alpha)+(_beg_alpha)
            end
        end
    end)
end
_editor_class["MainMenuTransitioner"].frame=function(self)
    self.class.base.frame(self)
    self.imgx = self.imgx + 0.2
    self.imgy = self.imgy + 0.2
end
_editor_class["MainMenuTransitioner"].render=function(self)
    SetViewMode'ui'
    self.class.base.render(self)
    SetImageState("image:MainMenuScroller2","mul+rev",Color(self.haraeAlpha - 150,255,255,255))
    local w, h = GetTextureSize("image:MainMenuScroller2")
    w, h = w * 0.4, h * 0.4
    for i = -int((screen.width + 16 + self.imgx) / w + 0.5), int((screen.width + 16 - self.imgx) / w + 0.5) do
    	for j = -int((screen.height + 16 + self.imgy) / h + 0.5), int((screen.height + 16 - self.imgy) / h + 0.5) do
    		Render("image:MainMenuScroller2", self.imgx + i * w, self.imgy + j * h + (self.timer * 12) - 480 * 2 - 65, 0, 0.4, 0.4)
    	end
    end
    SetImageState("image:MainMenuHarae","mul+rev",Color(self.haraeAlpha,255,255,255))
    do
        local _beg_posx=-60 local posx=_beg_posx local _end_posx=854+60 local _d_posx=(_end_posx-_beg_posx)/(20-1)
        for _=1,20 do
            Render("image:MainMenuHarae",posx, (self.timer * 12) - 50 - 120,(_ * self.timer) * 0.45,1/2.25 - 0.06 + self.sizeDiff - 0.12, 1/2.25 - 0.06 + self.sizeDiff - 0.12,0.5)
            Render("image:MainMenuHarae",posx, (self.timer * 12) - 50 - 60,(_ * self.timer) * 0.45,1/2.25 - 0.06 + self.sizeDiff - 0.06, 1/2.25 - 0.06 + self.sizeDiff - 0.06,0.5)
            Render("image:MainMenuHarae",posx, (self.timer * 12) - 50,(_ * self.timer) * 0.45,1/2.25 - 0.06 + self.sizeDiff, 1/2.25 - 0.06 + self.sizeDiff,0.5)
            posx=posx+_d_posx
        end
    end
    SetImageState("white","",Color(self.faderVal,0,0,0))
    Render("white",screen.width/2, screen.height/2,0,854, 480,0.5)
    SetImageState("white","",Color(255,255,255,255))
    SetViewMode'world'
end
_editor_class["MainMenuBlackHole"]=Class(_object)
_editor_class["MainMenuBlackHole"].init=function(self,_x,_y,_)
    self.x,self.y=_x,_y
    self.img="img_void"
    self.layer=LAYER_TOP
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=false
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
    self.canvasX = 854
    self.canvasY = 0
    self.bhSize = 0.2
    self.bhAlpha = 0
    lasttask=task.New(self,function()
        do
            local _beg_alpha=0 local alpha=_beg_alpha  local _w_alpha=0 local _end_alpha=255 local _d_w_alpha=90/(20-1)
            for _=1,20 do
                self.bhAlpha = alpha
                task._Wait(1)
                _w_alpha=_w_alpha+_d_w_alpha alpha=(_end_alpha-_beg_alpha)*sin(_w_alpha)+(_beg_alpha)
            end
        end
    end)
    lasttask=task.New(self,function()
        do
            local _beg_size=0.2 local size=_beg_size  local _w_size=-90 local _end_size=2 local _d_w_size=90/(30-1)
            for _=1,30 do
                self.bhSize = size
                task._Wait(1)
                _w_size=_w_size+_d_w_size size=(_end_size-_beg_size)*sin(_w_size)+(_end_size)
            end
        end
    end)
end
_editor_class["MainMenuBlackHole"].frame=function(self)
    if MainMenuRef.canvasIndex == 99 then
    	self.canvasX = LerpDecel(self.canvasX, 0, 0.04)
    	self.canvasY = LerpDecel(self.canvasY, 0, 0.04)
    else
    	self.canvasX = LerpDecel(self.canvasX, 854, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, 0, 0.05)
    end
    self.class.base.frame(self)
end
_editor_class["MainMenuBlackHole"].render=function(self)
    SetViewMode'ui'
    self.class.base.render(self)
    SetImageState("image:MainMenuBlackHole_1","mul+rev",Color(self.bhAlpha,255,255,255))
    SetImageState("image:MainMenuBlackHole_2","mul+rev",Color(self.bhAlpha,255,255,255))
    Render("image:MainMenuBlackHole_1",screen.width/2 + self.canvasX, screen.height/2 + self.canvasY,self.timer * 6,1/2.25 * self.bhSize, 1/2.25 * self.bhSize,0.5)
    Render("image:MainMenuBlackHole_2",screen.width/2 + self.canvasX, screen.height/2 + self.canvasY,self.timer * 8 * -1 ,1/2.25 * self.bhSize, 1/2.25 * (self.bhSize * 2.4),0.5)
    SetViewMode'world'
end
_editor_class["MainMenuOptions"]=Class(_object)
_editor_class["MainMenuOptions"].init=function(self,_x,_y,_)
    self.x,self.y=_x,_y
    self.img="img_void"
    self.layer=LAYER_TOP
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=false
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
    self.canvasX = 854
    self.canvasY = 0
    self.index = 1
    self.resIndex = scoredata.resolutionIndex or 1
    self.windowed = scoredata.windowed or 1
    self.monitor = scoredata.monitor or 1
    self.vsync = scoredata.vsync or false
    self.bgmVol = scoredata.bgmVolume or setting.bgmvolume or 0.8
    self.seVol = scoredata.seVol or setting.sevolume or 0.8
    self.windowedText = {"Windowed", "Borderless", "Exclusive"}
    
    self.resolutionValues = {
    	{640, 360},
    	{854, 480},
    	{960, 540},
    	{1280, 720},
    	{1366, 768},
    	{1600, 900},
    	{1920, 1080},
    	{2560, 1440}
    }
    
    self.text = {
    	"Resolution: " .. self.resolutionValues[self.resIndex][1] .. "x" .. self.resolutionValues[self.resIndex][2],
    	"Fullscreen: " .. tostring(self.windowed),
    	"Vsync: " .. tostring(self.vsync),
    	"BGM Volume: " .. self.bgmVol * 100 .. "%",
    	"SE Volume: " .. self.seVol * 100 .. "%",
    	"Save and Return"
    }
    
    SetBGMVolume(self.bgmVol)
    --SetBGMVolume("bgm:BGM_Title", setting.bgmvolume/100)
    SetSEVolume(self.seVol)
    
end
_editor_class["MainMenuOptions"].frame=function(self)
    if MainMenuRef.canvasIndex == 7 then
    	self.canvasX = LerpDecel(self.canvasX, 0, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, 0, 0.05)
    else
    	self.canvasX = LerpDecel(self.canvasX, 854, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, 0, 0.05)
    end
    
    if MainMenuRef.canvasIndex == 7 then
    	if KeyIsPressed"shoot" and MainMenuRef.interactDelay == 0 then
    		PlaySound("ok00",0.1,self.x/256,false)
    		MainMenuRef.interactDelay = 5
    		if self.index == 1 then
    			self.resIndex = Wrap(self.resIndex + 1, 1, 9)
    		elseif self.index == 2 then
    			self.windowed = Wrap(self.windowed + 1, 1, 4)
    		elseif self.index == 3 then
    			self.monitor = Wrap(self.monitor + 1, 1, #lstg.ListMonitor() + 1) or 1
    		elseif self.index == 4 then
    			self.vsync = not self.vsync
    		elseif self.index == 5 then
    			self.bgmVol = Wrap(self.bgmVol + 0.1, 0, 1.1)
    			SetBGMVolume(self.bgmVol)
    		elseif self.index == 6 then
    			self.seVol = Wrap(self.seVol + 0.1, 0, 1.1)
    			SetSEVolume(self.seVol)
    		elseif self.index == 7 then
    			scoredata.resolutionIndex = self.resIndex
    			scoredata.windowed = self.windowed
    			scoredata.monitor = self.monitor
    			scoredata.vsync = self.vsync
    			scoredata.bgmVolume = self.bgmVol
    			scoredata.seVolume = self.seVol
    			setting.resx = self.resolutionValues[self.resIndex][1]
    			setting.resy = self.resolutionValues[self.resIndex][2]
    			setting.windowed = self.windowed
    			setting.monitor = self.monitor
    			setting.vsync = self.vsync
    			setting.bgmvolume = self.bgmVol
    			setting.sevolume = self.seVol
    			saveConfigure()
    			if self.windowed == 1 then
    				lstg.VideoModeWindowed(setting.resx, setting.resy, setting.vsync, setting.monitor)
    			elseif self.windowed == 2 then
    				lstg.VideoModeFSBorderless(setting.resx, setting.resy, setting.vsync, setting.monitor)
    			else
    				lstg.VideoModeFSExclusive(setting.resx, setting.resy, setting.vsync)
    			end
    			--ChangeVideoMode(self.resolutionValues[self.resIndex][1], self.resolutionValues[self.resIndex][2], self.windowed, self.vsync)
    			ResetScreen()
    			SetBGMVolume(self.bgmVol)
    			--SetBGMVolume("bgm:BGM_Title", setting.bgmvolume/100)
    			SetSEVolume(self.seVol)
    			MainMenuRef.canvasIndex = 0
    		end
    	end
    
    	if KeyIsPressed"spell" then
    		PlaySound("cancel00",0.1,self.x/256,false)
    		MainMenuRef.canvasIndex = 0
    	end
    	
    	if is_up_held then
    		self.index = Wrap(self.index - 1, 1, 8)
    		PlaySound("select00",0.1,0,false)
    	end
    	
    	if is_right_held then
    		if self.index == 1 then
    			self.resIndex = Wrap(self.resIndex + 1, 1, 9)
    		elseif self.index == 2 then
    			self.windowed = Wrap(self.windowed + 1, 1, 4)
    		elseif self.index == 3 then
    			self.monitor = Wrap(self.monitor + 1, 1, #lstg.ListMonitor() + 1) or 1
    		elseif self.index == 4 then
    			self.vsync = not self.vsync
    		elseif self.index == 5 then
    			self.bgmVol = Wrap(self.bgmVol + 0.1, 0, 1.1)
    			SetBGMVolume(self.bgmVol)
    		elseif self.index == 6 then
    			self.seVol = Wrap(self.seVol + 0.1, 0, 1.1)
    			SetSEVolume(self.seVol)
    		end
    		PlaySound("select00",0.1,0,false)
    	end
    	
    	if is_left_held then
    		if self.index == 1 then
    			self.resIndex = Wrap(self.resIndex - 1, 1, 9)
    		elseif self.index == 2 then
    			self.windowed = Wrap(self.windowed - 1, 1, 4)
    		elseif self.index == 3 then
    			self.monitor = Wrap(self.monitor - 1, 1, #lstg.ListMonitor() + 1) or 1
    		elseif self.index == 4 then
    			self.vsync = not self.vsync
    		elseif self.index == 5 then
    			self.bgmVol = Wrap(self.bgmVol - 0.1, 0, 1.1)
    			SetBGMVolume(self.bgmVol)
    		elseif self.index == 6 then
    			self.seVol = Wrap(self.seVol - 0.1, 0, 1.1)
    			SetSEVolume(self.seVol)
    		end
    		PlaySound("select00",0.1,0,false)
    	end
    	
    	if is_down_held then
    		self.index = Wrap(self.index + 1, 1, 8)
    		PlaySound("select00",0.1,0,false)
    	end
    end
    
    self.text = {
    	"Resolution: " .. self.resolutionValues[self.resIndex][1] .. "x" .. self.resolutionValues[self.resIndex][2],
    	"Fullscreen: " .. tostring(self.windowedText[self.windowed]),
    	"Monitor: " .. tostring(self.monitor),
    	"Vsync: " .. tostring(self.vsync),
    	"BGM Volume: " .. self.bgmVol * 100 .. "%",
    	"SE Volume: " .. self.seVol * 100 .. "%",
    	"Save and Return"
    }
    self.class.base.frame(self)
end
_editor_class["MainMenuOptions"].render=function(self)
    SetViewMode'ui'
    self.class.base.render(self)
    SetFontState("font:LTCarpet","",Color(100,255,255,255))
    lstg.RenderText("font:LTCarpet","Resolution: " .. self.resolutionValues[self.resIndex][1] .. "x" .. self.resolutionValues[self.resIndex][2] .. "\n" ..
"Fullscreen: " .. tostring(self.windowedText[self.windowed]) .. "\n" ..
"Monitor: " .. tostring(self.monitor) .. "\n" ..
"Vsync: " .. tostring(self.vsync) .. "\n" ..
"BGM Volume: " .. self.bgmVol * 100 .. "%" .. "\n" ..
"SE Volume: " .. self.seVol * 100 .. "%" .. "\n" ..
"Save and Return",screen.width / 2 + self.canvasX + 325, 300 + MainMenuRef.yOffset + self.canvasY,0.3,2)
    SetFontState("font:LTCarpet","",Color(255,255,255,255))
    for _=1,7 do
        if _ == self.index then
            lstg.RenderText("font:LTCarpet",string.rep("\n", _ - 1) .. self.text[_],screen.width / 2 + self.canvasX + 325, 300 + MainMenuRef.yOffset + self.canvasY,0.3,2)
        else
        end
    end
    SetViewMode'world'
end
_editor_class["MainMenuSpell"]=Class(_object)
_editor_class["MainMenuSpell"].init=function(self,_x,_y,_)
    self.x,self.y=_x,_y
    self.img="img_void"
    self.layer=LAYER_TOP
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=false
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
    self.canvasX = -854
    self.canvasY = 0
    self.index = 1
    self.subindex = 0
end
_editor_class["MainMenuSpell"].frame=function(self)
    if MainMenuRef.canvasIndex == 4 then
    	self.canvasX = LerpDecel(self.canvasX, 0, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, 0, 0.05)
    else
    	self.canvasX = LerpDecel(self.canvasX, -854, 0.05)
    	self.canvasY = LerpDecel(self.canvasY, 0, 0.05)
    end
    
    if MainMenuRef.canvasIndex == 4 then
    	if KeyIsPressed"shoot" and MainMenuRef.interactDelay == 0 then
    		PlaySound("ok00",0.1,self.x/256,false)
    		MainMenuRef.interactDelay = 5
    		MainMenuRef.canvasIndex = 1
    		self.altPos = true
    		MainMenuRef.isSpellPractice = true
    		lstg.var.sc_index = self.index + self.subindex
    	end
    
    	if KeyIsPressed"spell" and MainMenuRef.interactDelay == 0 then
    		PlaySound("cancel00",0.1,self.x/256,false)
    		MainMenuRef.canvasIndex = 0
    		self.altPos = false
    		MainMenuRef.isSpellPractice = false
    	end
    	
    	if is_up_held then
    		if self.index == 2 and _sc_table[self.index - 2] ~= nil then
    			self.subindex = self.subindex - 1
    		else
    			if self.subindex > 0 then
    				self.subindex = self.subindex - 1
    			else
    				if self.index == 1 then
    					self.index = 9
    					self.subindex = #_sc_table - 9
    				else
    					self.index = Wrap(self.index - 1, 1, 10)
    				end
    			end
    		end
    		PlaySound("select00",0.1,0,false)
    	end
    	
    	if is_down_held then
    		if self.index == 9 and _sc_table[self.index + 2] ~= nil then
    			if self.index == 9 and self.subindex == #_sc_table - 9 then
    				self.index = 1
    				self.subindex = 0
    			else
    				self.subindex = self.subindex + 1
    			end
    		else
    			
    			self.index = Wrap(self.index + 1, 1, 10)
    		end
    		--self.index = Wrap(self.index + 1, 1, 10)
    		PlaySound("select00",0.1,0,false)
    	end
    end
    self.class.base.frame(self)
end
_editor_class["MainMenuSpell"].render=function(self)
    SetViewMode'ui'
    self.class.base.render(self)
    Render("image:MainMenuSpellHeader",screen.width / 2 + self.canvasX, 400 + MainMenuRef.yOffset + self.canvasY,0,1/2.25 - 0.2,1/2.25 - 0.2,0.5)
    lstg.RenderText("font:LTCarpet","Boss Name",100 + self.canvasX, screen.height/2 + self.canvasY + MainMenuRef.yOffset + 80,0.2,0)
    lstg.RenderText("font:LTCarpet","Spell Card Name",250 + self.canvasX, screen.height/2 + self.canvasY + MainMenuRef.yOffset + 80,0.2,0)
    lstg.RenderText("font:LTCarpet","Clear Times / Attempt Times",754 + self.canvasX, screen.height/2 + self.canvasY + MainMenuRef.yOffset + 80,0.2,2)
    for _=1,#_sc_table do
        local allHist = scoredata.spell_card_hist["All"]
        local spellIndex = _sc_table[_ + self.subindex] and _sc_table[_ + self.subindex][2]
        local reimuHist = allHist and allHist[spellIndex] and allHist[spellIndex]["Reimu"]
        local flandreHist = allHist and allHist[spellIndex] and allHist[spellIndex]["Flandre"]
        local yuyukoHist = allHist and allHist[spellIndex] and allHist[spellIndex]["Yuyuko"]
        local mtHist = allHist and allHist[spellIndex] and allHist[spellIndex]["MT"]
        
        local reimuAttempt = reimuHist and reimuHist[2] or 0
        local flandreAttempt = flandreHist and flandreHist[2] or 0
        local yuyukoAttempt = yuyukoHist and yuyukoHist[2] or 0
        local mtAttempt = mtHist and mtHist[2] or 0
        
        local reimuClear = reimuHist and reimuHist[1] or 0
        local flandreClear = flandreHist and flandreHist[1] or 0
        local yuyukoClear = yuyukoHist and yuyukoHist[1] or 0
        local mtClear = mtHist and mtHist[1] or 0
        
        local spellAttempt = reimuAttempt + flandreAttempt + yuyukoAttempt + mtAttempt
        local spellClear = reimuClear + flandreClear + yuyukoClear + mtClear
        if self.index == _ then
            SetFontState("font:LTCarpet","",Color(255,255,255,255))
        else
            SetFontState("font:LTCarpet","",Color(175,175,175,175))
        end
        if spellAttempt > 0 then
            lstg.RenderText("font:LTCarpet",_editor_class[_sc_table[_ + self.subindex][1]].name,100 + self.canvasX, screen.height/2 + self.canvasY + MainMenuRef.yOffset - _ * 20 + 60,0.2,0)
            lstg.RenderText("font:LTCarpet",_sc_table[_ + self.subindex][2],250 + self.canvasX, screen.height/2 + self.canvasY + MainMenuRef.yOffset - _ * 20 + 60,0.2,0)
        else
            if _sc_table[_ + self.subindex] ~= nil then
                lstg.RenderText("font:LTCarpet","???",100 + self.canvasX, screen.height/2 + self.canvasY + MainMenuRef.yOffset - _ * 20 + 60,0.2,0)
                lstg.RenderText("font:LTCarpet","???",250 + self.canvasX, screen.height/2 + self.canvasY + MainMenuRef.yOffset - _ * 20 + 60,0.2,0)
            else
            end
        end
        if _sc_table[_ + self.subindex] ~= nil then
            lstg.RenderText("font:LTCarpet",spellClear .. "/" .. spellAttempt,754 + self.canvasX, screen.height/2 + self.canvasY + MainMenuRef.yOffset - _ * 20 + 60,0.2,2)
        else
        end
    end
    SetViewMode'world'
end
_editor_class["HUDScroller"]=Class(_object)
_editor_class["HUDScroller"].init=function(self,_x,_y,_)
    self.x,self.y=_x,_y
    self.img="img_void"
    self.layer=LAYER_TOP+1
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=false
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
    self.imgx = screen.width / 2
    self.imgy = screen.height / 2
end
_editor_class["HUDScroller"].frame=function(self)
    self.class.base.frame(self)
    self.imgx = self.imgx + 0.2
    self.imgy = self.imgx + 0.2
end
_editor_class["HUDScroller"].render=function(self)
    SetViewMode'ui'
    PushRenderTarget("RenderTarget")
    SetImageState("image:MainMenuScroller3","",Color(155,255,255,255))
    local w, h = GetTextureSize("image:MainMenuScroller3")
    w, h = w * 0.4, h * 0.4
    for i = -int((screen.width + 16 + self.imgx) / w + 0.5), int((screen.width + 16 - self.imgx) / w + 0.5) do
    	for j = -int((screen.height + 16 + self.imgy) / h + 0.5), int((screen.height + 16 - self.imgy) / h + 0.5) do
    		Render("image:MainMenuScroller3", self.imgx + i * w, self.imgy + j * h, 0, 0.4, 0.4)
    	end
    end
    PopRenderTarget("RenderTarget")
    SetImageState("image:MainMenuScroller3","",Color(0,255,255,255))
    self.class.base.render(self)
    PushRenderTarget("Mask")
    Render("ui_bg",screen.width/2, screen.height/2,0,1/2.25, 1/2.25,0.5)
    PopRenderTarget("Mask")
    lstg.PostEffect(
        -- 着色器资源名称
        "fx:alpha_mask",
        -- 屏幕渲染目标，采样器类型
        "RenderTarget", 6,
        -- 混合模式
        "mul+rev",
        -- 浮点参数
        {},
        -- 纹理与采样器类型参数
        {
            { "Mask", 6 },
        }
    )
    Render("image:HUDBorder",screen.width/2, screen.height/2,0,1/2.25, 1/2.25,0.5)
    SetViewMode'world'
end
_editor_class["HUDManager"]=Class(_object)
_editor_class["HUDManager"].init=function(self,_x,_y,_)
    self.x,self.y=_x,_y
    self.img="img_void"
    self.layer=LAYER_TOP+5
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=false
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
    self.yOffset = 0
    self.yPos = 480
    self.shadowCol = {255, 255, 255, 255}
    self.shadowColTarget = {
    	{ 255, 21, 61, 36 },
    	{ 255, 21, 35, 61 },
    	{ 255, 61, 24, 21 },
    	{ 255, 55, 21, 61 },
    	{ 255, 142, 123, 87 },
    	{ 255, 100, 86, 140 }
    }
    last=New(_editor_class["HUDScroller"],self.x,self.y,_)
    lasttask=task.New(self,function()
        do
            local _beg_yPos=480 local yPos=_beg_yPos  local _w_yPos=-90 local _end_yPos=340 local _d_w_yPos=180/(45-1)
            for _=1,45 do
                self.yPos = yPos
                task._Wait(1)
                _w_yPos=_w_yPos+_d_w_yPos yPos=(_end_yPos-_beg_yPos)/2*sin(_w_yPos)+((_end_yPos+_beg_yPos)/2)
            end
        end
    end)
    lasttask=task.New(self,function()
        do
            local _h_yOffset=(5-(-5))/2 local _t_yOffset=(5+(-5))/2 local yOffset=_h_yOffset*sin(0)+_t_yOffset local _w_yOffset=0 local _d_w_yOffset=1.5
            for _=1,_infinite do
                self.yOffset = yOffset
                task._Wait(3)
                _w_yOffset=_w_yOffset+_d_w_yOffset yOffset=_h_yOffset*sin(_w_yOffset)+_t_yOffset
            end
        end
    end)
end
_editor_class["HUDManager"].frame=function(self)
    for i = 1, 4 do
    	self.shadowCol[i] = LerpDecel(self.shadowCol[i], self.shadowColTarget[lstg.var.difficulty][i], 0.1)
    end
    self.class.base.frame(self)
end
_editor_class["HUDManager"].render=function(self)
    SetViewMode'ui'
    lstg.var.score = lstg.var.score + 1
    self.class.base.render(self)
    Render("image:HUDDifficultyLabels" .. lstg.var.difficulty,753, self.yPos + 115 + self.yOffset,0,1/2.25, 1/2.25,0.5)
    Render("image:HUDLabelInfo",700, self.yPos + self.yOffset,0,1/2.25, 1/2.25,0.5)
    SetFontState("font:TTKP","",Color(255,225,225,225))
    lstg.RenderText("font:TTKP",FormatScore(max(lstg.tmpvar.hiscore or 0, lstg.var.score or 0)),843, self.yPos + 88.5 + self.yOffset,0.2,6)
    SetFontState("font:TTKP","",Color(255,255,255,255))
    lstg.RenderText("font:TTKP",FormatScore(lstg.var.score or 0),843, self.yPos + 89.5 + self.yOffset - 22,0.2,6)
    SetFontState("font:TTKP","",Color(255,255,139,139))
    lstg.RenderText("font:TTKP",string.format("%d,  /4,  ", math.floor(lstg.var.power / 100)),844, self.yPos - 47 + self.yOffset,0.2,6)
    lstg.RenderText("font:TTKP",string.format("%d%d    00", math.floor((lstg.var.power % 100) / 10), lstg.var.power % 10),839, self.yPos - 47 + self.yOffset,0.15,6)
    SetFontState("font:TTKP","",Color(255,139,158,255))
    lstg.RenderText("font:TTKP",lstg.var.pointrate,843, self.yPos - 68 + self.yOffset,0.2,6)
    SetFontState("font:TTKP","",Color(255,226,226,226))
    lstg.RenderText("font:TTKP",lstg.var.graze,843, self.yPos - 89 + self.yOffset,0.2,6)
    SetImageState("image:HUDTint","",Color(self.shadowCol[1],self.shadowCol[2],self.shadowCol[3],self.shadowCol[4]))
    Render("image:HUDTint",screen.width/2, screen.height/2,0,1/2.25, 1/2.25,0.5)
    Render("image:HUDTint",screen.width/2, screen.height/2,0,1/2.25, 1/2.25,0.5)
    SetViewMode'world'
end
_editor_class["DebugENM"]=Class(enemy)
_editor_class["DebugENM"].init=function(self,_x,_y,_)
    enemy.init(self,9,10000,false,true,false)
    self.x,self.y=_x,_y
    self.drop={0,0,0}
    task.New(self,function() self.protect=true task.Wait(1) self.protect=false end)
    self.x, self.y = 0, 40
    self.layer = LAYER_TOP + 999
    self.hp = 10000
    self.damage_frames = {}
    for i=1, 60 do
        self.damage_frames[i] = 0
    end
    lasttask=task.New(self,function()
        for _=1,_infinite do
            self.bulnames = { arrow_big, arrow_mid, arrow_small, gun_bullet, butterfly, square,
                ball_small, ball_mid, ball_mid_c, ball_big, ball_huge, ball_light,
                star_small, star_big, grain_a, grain_b, grain_c, kite, knife, knife_b,
                water_drop, mildew, ellipse, heart, money, music, silence,
                water_drop_dark, ball_huge_dark, ball_light_dark
            }
            do local bulindex,_d_bulindex=(1),(1) for _=1,30 do
                for _=1,8 do
                    do local ang,_d_ang=(180),(360/16) for _=1,16 do
                        last=New(_straight,self.bulnames[bulindex],_,self.x,self.y,4,ang,false,0,true,true,0,false,0,0,0,false)
                    ang=ang+_d_ang end end
                    PlaySound("tan00",0.1,self.x/256,false)
                    task._Wait(25)
                    do local ang,_d_ang=(180),(360/16) for _=1,16 do
                        last=New(_straight,self.bulnames[bulindex],_,self.x,self.y,4,ang,false,0,true,true,0,false,0,0,0,false)
                        last.hscale, last.vscale = 6,6
                    ang=ang+_d_ang end end
                    PlaySound("tan00",0.1,self.x/256,false)
                    task._Wait(25)
                end
            bulindex=bulindex+_d_bulindex end end
            task._Wait(16)
        end
    end)
end
_editor_class["DebugENM"].frame=function(self)
    local damage_frame = 10000 - self.hp
    for i=59, 1, -1 do
         self.damage_frames[i+1] = self.damage_frames[i]
    end
    self.damage_frames[1] = damage_frame
    local average_damage = 0
    for i=1, 60 do
        average_damage = average_damage + self.damage_frames[i]
    end
    self.average_damage = average_damage
    self.class.base.frame(self)
    self.hp = 10000
end
_editor_class["DebugENM"].render=function(self)
    self.class.base.render(self)
end
_editor_class["FairySpawn"]=Class(enemy)
_editor_class["FairySpawn"].init=function(self,_x,_y,style, hp, dropItem, contactDamage, iframe, bound)
    enemy.init(self,style,hp,false,bound,contactDamage)
    self.x,self.y=_x,_y
    self.drop={dropItem[1],dropItem[2],dropItem[3]}
    task.New(self,function() self.protect=true task.Wait(iframe) self.protect=false end)
    self.AE = {}
    self.wingLRot = 0
    self.wingRRot = 0
    self.armLRot = 0
    self.armRRot = 0
    self.bodyRot = 0
    self.headRot = 0
    self.legRot = 0
    if style > 0 then
        function self.AE.renderAnim()
            self.AE.size = 1/6 * self.hscale
            Render("image:fairy" .. style .. "_wingr",self.x, self.y, 0 - (sin(self.timer * 12) * 25) + self.wingRRot,self.AE.size, self.AE.size,0.5)
            Render("image:fairy" .. style .. "_wingl",self.x, self.y, 0 + (sin(self.timer * 12) * 25) + self.wingRRot,self.AE.size, self.AE.size,0.5)
            Render("image:fairy" .. style .. "_arml",self.x, self.y, 0 - (sin(self.timer * 4) * 8) + self.armLRot - 10,self.AE.size, self.AE.size,0.5)
            Render("image:fairy" .. style .. "_armr",self.x, self.y, 0 + (sin(self.timer * 4) * 8) + self.armRRot + 10,self.AE.size, self.AE.size,0.5)
            Render("image:fairy" .. style .. "_legs",self.x, self.y, 0 - (sin(self.timer * 3) * 2) + self.legRot,self.AE.size, self.AE.size,0.5)
            Render("image:fairy" .. style .. "_body",self.x, self.y,self.bodyRot,self.AE.size, self.AE.size,0.5)
            Render("image:fairy" .. style .. "_head",self.x, self.y,self.headRot,self.AE.size, self.AE.size,0.5)
        end
        function self.AE.animate()
            if self.dx >= 1 then
            	self.wingLRot = LerpDecel(self.wingLRot, -10, 0.1)
            	self.wingRRot = LerpDecel(self.wingRRot, -10, 0.1)
            	self.armLRot = LerpDecel(self.armLRot, -10, 0.1)
            	self.armRRot = LerpDecel(self.armRRot, -10, 0.1)
            	self.bodyRot = LerpDecel(self.bodyRot, -10, 0.1)
            	self.headRot = LerpDecel(self.headRot, -10, 0.1)
            	self.legRot = LerpDecel(self.legRot, -10, 0.1)
            elseif self.dx <= -1 then
            	self.wingLRot = LerpDecel(self.wingLRot, 10, 0.1)
            	self.wingRRot = LerpDecel(self.wingRRot, 10, 0.1)
            	self.armLRot = LerpDecel(self.armLRot, 10, 0.1)
            	self.armRRot = LerpDecel(self.armRRot, 10, 0.1)
            	self.bodyRot = LerpDecel(self.bodyRot, 10, 0.1)
            	self.headRot = LerpDecel(self.headRot, 10, 0.1)
            	self.legRot = LerpDecel(self.legRot, 10, 0.1)
            else
            	self.wingLRot = LerpDecel(self.wingLRot, 0, 0.1)
            	self.wingRRot = LerpDecel(self.wingRRot, 0, 0.1)
            	self.armLRot = LerpDecel(self.armLRot, 0, 0.1)
            	self.armRRot = LerpDecel(self.armRRot, 0, 0.1)
            	self.bodyRot = LerpDecel(self.bodyRot, 0, 0.1)
            	self.headRot = LerpDecel(self.headRot, 0, 0.1)
            	self.legRot = LerpDecel(self.legRot, 0, 0.1)
            end
        end
    else
    end
end
_editor_class["FairySpawn"].frame=function(self)
    self.class.base.frame(self)
    self.AE.animate()
end
_editor_class["FairySpawn"].render=function(self)
    self.AE.renderAnim()
    lstg.RenderText("font:LTCarpet","" .. self.wingLRot,self.x,self.y-100,0.2,0)
end
_editor_class["ShotShadows"]=Class(_object)
_editor_class["ShotShadows"].init=function(self,_x,_y,_)
    self.x,self.y=_x,_y
    self.img="leaf"
    self.layer=LAYER_PLAYER_BULLET-5
    self.group=GROUP_ENEMY_BULLET
    self.hide=false
    self.bound=true
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=true
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
    SetImageState("image:BulletShadow","",Color(75,255,255,255))
end
_editor_class["ShotShadows"].render=function(self)
    for _,unit in ObjList(GROUP_ENEMY_BULLET) do
        SetImageState("image:BulletShadow", "", Color(math.min(125, 1 * (unit.timer * 2)), 255, 255, 255))
        Render("image:BulletShadow",unit.x, unit.y,0,((1 * unit.hscale)/2.25) * 0.25,((1 * unit.vscale)/2.25) * 0.25,0.5)
    end
    self.class.base.render(self)
end
_editor_class["ShotEf"]=Class(_object)
_editor_class["ShotEf"].init=function(self,_x,_y,angle,speed,img,scale)
    self.x,self.y=_x,_y
    self.img=img
    self.layer=LAYER_PLAYER_BULLET+5
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=false
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
    self.hscale, self.vscale = scale, scale
    SetV2(self,speed,angle,true,false)
    _object.set_color(self,"mul+add",255,255,255,255)
    lasttask=task.New(self,function()
        do
            local _beg_spd=speed local spd=_beg_spd  local _w_spd=0 local _end_spd=0 local _d_w_spd=90/(8-1)
            local _beg_alpha=255 local alpha=_beg_alpha  local _w_alpha=0 local _end_alpha=0 local _d_w_alpha=90/(8-1)
            for _=1,8 do
                SetV2(self,spd,angle,true,false)
                _object.set_color(self,"mul+add",alpha,255,255,255)
                task._Wait(1)
                _w_spd=_w_spd+_d_w_spd spd=(_end_spd-_beg_spd)*sin(_w_spd)+(_beg_spd)
                _w_alpha=_w_alpha+_d_w_alpha alpha=(_end_alpha-_beg_alpha)*sin(_w_alpha)+(_beg_alpha)
            end
        end
        _del(self,true)
    end)
end
_editor_class["BombEf"]=Class(_object)
_editor_class["BombEf"].init=function(self,_x,_y,positionx, positiony, col)
    self.x,self.y=_x,_y
    self.img="img_void"
    self.layer=LAYER_TOP+999
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=false
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
    self.posx, self.posy = WorldToUI(positionx, positiony)
    self.altposx, self.altposy = positionx, positiony
    self.alpha = 0
    self.col = col
    self.scale = 0
    lasttask=task.New(self,function()
        do
            local _beg_alpha=0 local alpha=_beg_alpha  local _w_alpha=-90 local _end_alpha=255 local _d_w_alpha=180/(10-1)
            for _=1,10 do
                self.alpha = alpha
                task._Wait(1)
                _w_alpha=_w_alpha+_d_w_alpha alpha=(_end_alpha-_beg_alpha)/2*sin(_w_alpha)+((_end_alpha+_beg_alpha)/2)
            end
        end
        do
            local _beg_alpha=255 local alpha=_beg_alpha  local _w_alpha=-90 local _end_alpha=0 local _d_w_alpha=180/(90-1)
            for _=1,90 do
                self.alpha = alpha
                task._Wait(1)
                _w_alpha=_w_alpha+_d_w_alpha alpha=(_end_alpha-_beg_alpha)/2*sin(_w_alpha)+((_end_alpha+_beg_alpha)/2)
            end
        end
        _del(self,true)
    end)
    lasttask=task.New(self,function()
        do
            local _beg_scale=0 local scale=_beg_scale  local _w_scale=-90 local _end_scale=3 local _d_w_scale=180/(100-1)
            for _=1,100 do
                self.scale = scale
                task._Wait(1)
                _w_scale=_w_scale+_d_w_scale scale=(_end_scale-_beg_scale)/2*sin(_w_scale)+((_end_scale+_beg_scale)/2)
            end
        end
    end)
end
_editor_class["BombEf"].render=function(self)
    Render("image:BombCutin",self.altposx, self.altposy,self.timer,self.scale, self.scale,0.5)
    Render("image:BombCutin",self.altposx, self.altposy,self.timer*-1,self.scale, self.scale,0.5)
    SetViewMode'ui'
    SetImageState("image:BombCutin","mul+add",Color(self.alpha,self.col[1],self.col[2],self.col[3]))
    PushRenderTarget("BombEf")
    Render("image:BombCutin",self.posx, self.posy,self.timer,self.scale, self.scale,0.5)
    Render("image:BombCutin",self.posx, self.posy,self.timer,self.scale, self.scale,0.5)
    Render("image:BombCutin",self.posx, self.posy,self.timer,self.scale, self.scale,0.5)
    Render("image:BombCutin",self.posx, self.posy,self.timer*-1,self.scale, self.scale,0.5)
    Render("image:BombCutin",self.posx, self.posy,self.timer*-1,self.scale, self.scale,0.5)
    Render("image:BombCutin",self.posx, self.posy,self.timer*-1,self.scale, self.scale,0.5)
    PopRenderTarget("BombEf")
    self.class.base.render(self)
    lstg.PostEffect(
        -- 着色器资源名称
        "fx:alpha_mask",
        -- 屏幕渲染目标，采样器类型
        "BombEf", 6,
        -- 混合模式
        "mul+add",
        -- 浮点参数
        {},
        -- 纹理与采样器类型参数
        {
            { "Mask", 6 },
        }
    )
    PushRenderTarget("BombEf")
    RenderClear(Color(0,0,0,0))
    PopRenderTarget("BombEf")
    SetViewMode'world'
end
_editor_class["LoadingManager"]=Class(_object)
_editor_class["LoadingManager"].init=function(self,_x,_y,_)
    self.x,self.y=_x,_y
    self.img="img_void"
    self.layer=LAYER_TOP
    self.group=GROUP_GHOST
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=false
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
end
_editor_class["LoadingManager"].render=function(self)
    SetViewMode'ui'
    lstg.RenderTTF("loading","test",200,600,0,200,8,Color(255, 255, 255, 255),3)
    print("ASLIJASLKRJALKSRJALSKRJALKSRJLAKSJRLKAJRSKLAQJSLKRJALSKRJALKSJRKLASJRLKAJSLKRASKRJLAKSRJLKASJR")
    self.class.base.render(self)
    SetViewMode'world'
end
_editor_class["ReimuBaseShot"]=Class(_object)
_editor_class["ReimuBaseShot"].init=function(self,_x,_y,_)
    player_bullet_straight.init(self,"image:r_shot",_x,_y,15,90,2)
    self.hp = 10
    self._blend, self._a, self._r, self._g, self._b = "", 255, 255, 255, 255
    self._servants = {}
    self.trail=250
    self.hscale, self.vscale = 0.6, 0.6
    _object.set_color(self,"mul+add",100,255,255,255)
    self.a, self.b, self.rect = 16, 8,false
end
_editor_class["ReimuBaseShot"].frame=function(self)
    task.Do(self)
    player_bullet_straight.frame(self)
    self.class.base.frame(self)
    player_class.findtarget(self)
    if IsValid(self.target) and self.target.colli then
    	local a = math.mod(Angle(self, self.target) - self.rot + 720, 360)
    	if a > 180 then
    		a = a - 360
    	end
    	local da = self.trail / (Dist(self, self.target) + 1)
    	if da>=abs(a) then
    		self.rot = Angle(self, self.target)
    	else
    		self.rot = self.rot + sign(a) * da
    	end
    end
    self.vx = 15 * cos(self.rot)
    self.vy = 15 * sin(self.rot)
end
_editor_class["ReimuBaseShot"].render=function(self)
    player_bullet_straight.render(self)
    self.class.base.render(self)
end
_editor_class["ReimuBaseShot"].colli=function(self)
    self.class.base.colli(self)
end
_editor_class["ReimuBaseShot"].kill=function(self)
    last=New(_editor_class["ShotEf"],self.x,self.y,self.rot, 15, "image:r_shotef", self.hscale)
end
_editor_class["ReimuBaseShot"].del=function(self)
    self.class.base.del(self)
end
_editor_class["ReimuNeedleShot"]=Class(_object)
_editor_class["ReimuNeedleShot"].init=function(self,_x,_y,_)
    player_bullet_straight.init(self,"image:r_shot2",_x,_y,15,90,2)
    self.hp = 10
    self._blend, self._a, self._r, self._g, self._b = "", 255, 255, 255, 255
    self._servants = {}
    self.trail=20
    _object.set_color(self,"mul+add",40,255,255,255)
    self.a, self.b, self.rect = 28, 8,false
end
_editor_class["ReimuNeedleShot"].frame=function(self)
    task.Do(self)
    player_bullet_straight.frame(self)
    self.class.base.frame(self)
    player_class.findtarget(self)
    if IsValid(self.target) and self.target.colli then
    	local a = math.mod(Angle(self, self.target) - self.rot + 720, 360)
    	if a > 180 then
    		a = a - 360
    	end
    	local da = self.trail / (Dist(self, self.target) + 1)
    	if da>=abs(a) then
    		self.rot = Angle(self, self.target)
    	else
    		self.rot = self.rot + sign(a) * da
    	end
    end
    self.vx = 15 * cos(self.rot)
    self.vy = 15 * sin(self.rot)
end
_editor_class["ReimuNeedleShot"].render=function(self)
    player_bullet_straight.render(self)
    self.class.base.render(self)
end
_editor_class["ReimuNeedleShot"].colli=function(self)
    self.class.base.colli(self)
end
_editor_class["ReimuNeedleShot"].kill=function(self)
    last=New(_editor_class["ShotEf"],self.x,self.y,self.rot, 15, "image:r_shot2ef", self.hscale)
end
_editor_class["ReimuNeedleShot"].del=function(self)
    self.class.base.del(self)
end
_editor_class["Reimu_Barrier"]=Class(_object)
_editor_class["Reimu_Barrier"].init=function(self,_x,_y,_)
    self.x,self.y=_x,_y
    self.img="img_void"
    self.layer=LAYER_PLAYER_BULLET
    self.group=GROUP_PLAYER_BULLET
    self.hide=false
    self.bound=false
    self.navi=false
    self.hp=10
    self.maxhp=10
    self.colli=true
    self._servants={}
    self._blend,self._a,self._r,self._g,self._b='',255,255,255,255
    self.x,self.y=0,0
    self.killflag = true
    self.distance = 0
    self.alpha = 0
    self.dmg = 1.3
    self.amuletspd = 3
    self.a, self.b, self.rect = 96, 96,true
    lasttask=task.New(self,function()
        do
            local _beg_alpha=0 local alpha=_beg_alpha  local _w_alpha=0 local _end_alpha=255 local _d_w_alpha=90/(20-1)
            for _=1,20 do
                self.alpha = alpha
                task._Wait(1)
                _w_alpha=_w_alpha+_d_w_alpha alpha=(_end_alpha-_beg_alpha)*sin(_w_alpha)+(_beg_alpha)
            end
        end
        task._Wait(100)
        do
            local _beg_alpha=255 local alpha=_beg_alpha  local _w_alpha=-90 local _end_alpha=0 local _d_w_alpha=90/(30-1)
            for _=1,30 do
                self.alpha = alpha
                task._Wait(1)
                _w_alpha=_w_alpha+_d_w_alpha alpha=(_end_alpha-_beg_alpha)*sin(_w_alpha)+(_end_alpha)
            end
        end
        _del(self,true)
    end)
    lasttask=task.New(self,function()
        do
            local _beg_ds=-30 local ds=_beg_ds  local _w_ds=0 local _end_ds=0 local _d_w_ds=90/(20-1)
            for _=1,20 do
                self.distance = ds
                self.a, self.b, self.rect = 96 + ds, 96 + ds,true
                task._Wait(1)
                _w_ds=_w_ds+_d_w_ds ds=(_end_ds-_beg_ds)*sin(_w_ds)+(_beg_ds)
            end
        end
        task._Wait(40)
        misc.ShakeScreen(60,3)
        do
            local _beg_ds=0 local ds=_beg_ds  local _w_ds=0 local _end_ds=192 local _d_w_ds=90/(60-1)
            for _=1,60 do
                self.distance = ds
                self.a, self.b, self.rect = 96 + ds, 96 + ds,true
                task._Wait(1)
                _w_ds=_w_ds+_d_w_ds ds=(_end_ds-_beg_ds)*sin(_w_ds)+(_beg_ds)
            end
        end
    end)
    lasttask=task.New(self,function()
        do
            local _beg_spd=3 local spd=_beg_spd  local _w_spd=0 local _end_spd=1 local _d_w_spd=90/(20-1)
            for _=1,20 do
                self.amuletspd = spd
                task._Wait(1)
                _w_spd=_w_spd+_d_w_spd spd=(_end_spd-_beg_spd)*sin(_w_spd)+(_beg_spd)
            end
        end
        task._Wait(40)
        do
            local _beg_spd=1 local spd=_beg_spd  local _w_spd=-90 local _end_spd=4 local _d_w_spd=90/(90-1)
            for _=1,90 do
                self.amuletspd = spd
                task._Wait(1)
                _w_spd=_w_spd+_d_w_spd spd=(_end_spd-_beg_spd)*sin(_w_spd)+(_end_spd)
            end
        end
    end)
end
_editor_class["Reimu_Barrier"].render=function(self)
    SetImageState("image:r_border","mul+add",Color(self.alpha,255,100,100))
    do local posy,_d_posy=(224),(-32*3) for _=1,32 do
        Render("image:r_border",self.distance,posy,180,1/6 * 3, 1/6 *3,0.5)
        Render("image:r_border",-self.distance,posy,0,1/6 * 3, 1/6 *3,0.5)
    posy=posy+_d_posy end end
    SetImageState("image:r_border","mul+add",Color(self.alpha,100,100,255))
    do local posx,_d_posx=(-224),(32*3) for _=1,32 do
        Render("image:r_border",posx, self.distance,-90,1/6 * 3, 1/6 *3,0.5)
        Render("image:r_border",posx, -self.distance,90,1/6 * 3, 1/6 *3,0.5)
    posx=posx+_d_posx end end
    do local posy,_d_posy=(224),(-45) for _=1,120 do
        do
            local _beg_posx=-220 local posx=_beg_posx local _end_posx=220 local _d_posx=(_end_posx-_beg_posx)/(8-1)
            for _=1,8 do
                SetImageState("image:r_amulet","mul+add",Color(self.alpha,255,100,100))
                Render("image:r_amulet",posx, posy - (self.timer * self.amuletspd) + 480,-90,1/4, 1/4,0.5)
                SetImageState("image:r_amulet","mul+add",Color(self.alpha,100,100,255))
                Render("image:r_amulet",posx + 32, posy - 80 + (self.timer * self.amuletspd),90,1/4, 1/4,0.5)
                posx=posx+_d_posx
            end
        end
    posy=posy+_d_posy end end
    self.class.base.render(self)
end
Reimu=Class(player_class)
Reimu.init=function(self)
    player_class.init(self)
    self.name = "Reimu"
    --[[ Add Option List Here]]
    
    LoadTexture('blank_void','blank_void.png')
    LoadImageGroup('blank_void','blank_void',0,0,32,48,8,3,0.5,0.5)
    self.imgs = {}
    self.A, self.B = 0.5,0.5
    for i = 1, 24 do self.imgs[i]='blank_void'..i end
    player.hspeed, player.lspeed = 4,2
    player.protect = 120
    self.hscale, self.vscale = 1/8, 1/8
    self.armllerp = 0
    self.armrlerp = 0
    self.legllerp = 0
    self.legrlerp = 0
    self.hairlerp = 0
    self.hatlerp = 0
    self.hattoplerp = 0
    self.skirtlerp = 0
    self.broomlerp = 0
    self.torsolerp = 0
    self.wiglerp = 0
    self.optionPosition = {}
    self.optionPosition[1] = {
    	{0, 30, 0, 20},
    	{0, 0, 0, 0},
    	{0, 0, 0, 0},
    	{0, 0, 0, 0},
    }
    self.optionPosition[2] = {
    	{-30, 0, -15, 30},
    	{30, 0, 15, 30},
    	{0, 0, 0, 0},
    	{0, 0, 0, 0},
    }
    self.optionPosition[3] = {
    	{-30, 0, -15, 30},
    	{30, 0, 15, 30},
    	{0, 30, 0, 20},
    	{0, 0, 0, 0},
    }
    self.optionPosition[4] = {
    	{-30, 0, -15, 30},
    	{30, 0, 15, 30},
    	{-15, 30, -10, 20},
    	{15, 30, 10, 20},
    }
    self.optionCurrentPosition = {
    	{0, 0},
    	{0, 0},
    	{0, 0},
    	{0, 0}
    }
    self.metalTimer = 0
    lstg.var.power = 400
    function self:optionFire(x, y, shrubIndex)
        if shrubIndex == 1 then
            do local speed,_d_speed=(10),(16) for _=1,2 do
                last=New(_editor_class["Earth_Shot"],x, y,speed)
            speed=speed+_d_speed end end
        elseif shrubIndex == 2 then
            last=New(_editor_class["Water_Shot"],x, y,10)
        elseif shrubIndex == 3 then
            for _=1,6 do
                last=New(_editor_class["Fire_Shot"],x, y,ran:Float(4, 12))
            end
        elseif shrubIndex == 4 then
            if x > player.x then
                do local ang,_d_ang=(0),(360/3) for _=1,3 do
                    last=New(_editor_class["Ice_Shot"],x, y,self.timer + ang)
                    last=New(_editor_class["Ice_Shot"],x, y,self.timer + ang + (360/3)/2)
                ang=ang+_d_ang end end
            else
                do local ang,_d_ang=(0),(360/3) for _=1,3 do
                    last=New(_editor_class["Ice_Shot"],x, y,-self.timer + ang + (360/3)/2)
                    last=New(_editor_class["Ice_Shot"],x, y,-self.timer + ang + (360/3)/2 + (360/3)/2)
                ang=ang+_d_ang end end
            end
        elseif shrubIndex == 5 then
            if x > player.x then
                do local ang,_d_ang=(0),(360/5) for _=1,5 do
                    last=New(_editor_class["Poison_Shot"],x, y,self.timer + ang)
                    last=New(_editor_class["Poison_Shot"],x, y,self.timer + ang + (360/3)/2)
                ang=ang+_d_ang end end
            else
                do local ang,_d_ang=(0),(360/5) for _=1,5 do
                    last=New(_editor_class["Poison_Shot"],x, y,-self.timer + ang + (360/3)/2)
                    last=New(_editor_class["Poison_Shot"],x, y,-self.timer + ang + (360/3)/2 + (360/3)/2)
                ang=ang+_d_ang end end
            end
        elseif shrubIndex == 6 then
            last=New(_editor_class["Lightning_Shot"],x, y,90)
            last=New(_editor_class["Lightning_Shot"],x, y,-90)
        elseif shrubIndex == 7 then
            do local a,_d_a=(90 - 15 * 3.5),(15) for _=1,8 do
                last=New(_editor_class["Wind_Shot"],x, y,a)
            a=a+_d_a end end
        elseif shrubIndex == 8 then
            if player.metalTimer == 0 then
                last=New(_editor_class["Metal_Shot"],x, y,_)
                player.metalTimer = 10
            else
                player.metalTimer = player.metalTimer - 1
            end
        else
        end
    end
end
Reimu.frame=function(self)
    task.Do(self)    player_class.frame(self)
    if (KeyIsDown"left" and KeyIsDown"right") or not (KeyIsDown"left" or KeyIsDown"right") then
    	self.armllerp = LerpDecel(self.armllerp, 0, 0.1)
    	self.armrlerp = LerpDecel(self.armllerp, 0, 0.1)
    	self.legllerp = LerpDecel(self.legllerp, 0, 0.1)
    	self.legrlerp = LerpDecel(self.legrlerp, 0, 0.1)
    	self.hairlerp = LerpDecel(self.hairlerp, 0, 0.1)
    	self.wiglerp = LerpDecel(self.wiglerp, 0, 0.1)
    	self.hatlerp = LerpDecel(self.hatlerp, 0, 0.1)
    	self.hattoplerp = LerpDecel(self.hattoplerp, 0, 0.1)
    	self.skirtlerp = LerpDecel(self.skirtlerp, 0, 0.1)
    	self.broomlerp = LerpDecel(self.broomlerp, 0, 0.1)
    	self.torsolerp = LerpDecel(self.torsolerp, 0, 0.1)
    elseif KeyIsDown"left" then
    	self.armllerp = LerpDecel(self.armllerp, 15, 0.1)
    	self.armrlerp = LerpDecel(self.armrlerp, 15, 0.1)
    	self.legllerp = LerpDecel(self.legllerp, 20, 0.1)
    	self.legrlerp = LerpDecel(self.legrlerp, 20, 0.1)
    	self.hairlerp = LerpDecel(self.hairlerp, 20, 0.1)
    	self.wiglerp = LerpDecel(self.wiglerp, 1, 0.1)
    	self.hatlerp = LerpDecel(self.hatlerp, 15, 0.1)
    	self.hattoplerp = LerpDecel(self.hattoplerp, 20, 0.1)
    	self.skirtlerp = LerpDecel(self.skirtlerp, 30, 0.1)
    	self.broomlerp = LerpDecel(self.broomlerp, 15, 0.1)
    	self.torsolerp = LerpDecel(self.torsolerp, 15, 0.1)
    elseif KeyIsDown"right" then
    	self.armllerp = LerpDecel(self.armllerp, -15, 0.1)
    	self.armrlerp = LerpDecel(self.armrlerp, -15, 0.1)
    	self.legllerp = LerpDecel(self.legllerp, -20, 0.1)
    	self.legrlerp = LerpDecel(self.legrlerp, -20, 0.1)
    	self.hairlerp = LerpDecel(self.hairlerp, -20, 0.1)
    	self.wiglerp = LerpDecel(self.wiglerp, -1, 0.1)
    	self.hatlerp = LerpDecel(self.hatlerp, -15, 0.1)
    	self.hattoplerp = LerpDecel(self.hattoplerp, -20, 0.1)
    	self.skirtlerp = LerpDecel(self.skirtlerp, -30, 0.1)
    	self.broomlerp = LerpDecel(self.broomlerp, -15, 0.1)
    	self.torsolerp = LerpDecel(self.torsolerp, -15, 0.1)
    end
    if KeyIsDown"slow" == false then
    	for i = 1, 4 do
    		self.optionCurrentPosition[i][1] = LerpDecel(self.optionCurrentPosition[i][1], self.optionPosition[math.floor(lstg.var.power / 100)][i][1], 0.1)
    		self.optionCurrentPosition[i][2] = LerpDecel(self.optionCurrentPosition[i][2], self.optionPosition[math.floor(lstg.var.power / 100)][i][2], 0.1)
    	end
    else
    	for i = 1, 4 do
    		self.optionCurrentPosition[i][1] = LerpDecel(self.optionCurrentPosition[i][1], self.optionPosition[math.floor(lstg.var.power / 100)][i][3], 0.1)
    		self.optionCurrentPosition[i][2] = LerpDecel(self.optionCurrentPosition[i][2], self.optionPosition[math.floor(lstg.var.power / 100)][i][4], 0.1)
    	end
    end
end
Reimu.render=function(self)
    player_class.render(self)
    if KeyIsDown"shoot" then
    	SetImageState("image:Hakkero", "mul+add", Color(255, 255, 255, 255))
    else
    	SetImageState("image:Hakkero", "mul+add", Color(150, 255, 255, 255))
    end
    --[[
    if lstg.var.power < 200 then
    	Render("image:Hakkero", self.x + self.optionCurrentPosition[1][1], self.y + self.optionCurrentPosition[1][2], self.timer * -1, 1/2.6, 1/2.6)
    	Render("image:Hakkero", self.x + self.optionCurrentPosition[1][1], self.y + self.optionCurrentPosition[1][2], self.timer * -1, 1/3.75, 1/3.75)
    elseif lstg.var.power >= 200 and lstg.var.power < 300 then
    	Render("image:Hakkero", self.x + self.optionCurrentPosition[1][1], self.y + self.optionCurrentPosition[1][2], self.timer * -1, 1/2.6, 1/2.6)
    	Render("image:Hakkero", self.x + self.optionCurrentPosition[1][1], self.y + self.optionCurrentPosition[1][2], self.timer * -1, 1/3.75, 1/3.75)
    
    	Render("image:Hakkero", self.x + self.optionCurrentPosition[2][1], self.y + self.optionCurrentPosition[2][2], self.timer * 1, 1/2.6, 1/2.6)
    	Render("image:Hakkero", self.x + self.optionCurrentPosition[2][1], self.y + self.optionCurrentPosition[2][2], self.timer * 1, 1/3.75, 1/3.75)
    end
    --]]
    for i = 1, 4 do
    	print("i = " .. i .. " aaaaaaaaaaaaaa" .. self.optionPosition[math.floor(lstg.var.power / 100)][i][1])
    	print("i = " .. i .. " bbbbbbbbbbbbbb" .. self.optionPosition[math.floor(lstg.var.power / 100)][i][2])
    	if self.optionPosition[math.floor(lstg.var.power / 100)][i][1] ~= 0 or self.optionPosition[math.floor(lstg.var.power / 100)][i][2] ~= 0 then
    		print("ALKSJRLAKJSLRAJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJASDASDA")
    		Render("image:Hakkero", self.x + self.optionCurrentPosition[i][1], self.y + self.optionCurrentPosition[i][2], self.timer * -1, 1/2.6, 1/2.6)
    		Render("image:Hakkero", self.x + self.optionCurrentPosition[i][1], self.y + self.optionCurrentPosition[i][2], self.timer * -1, 1/3.75, 1/3.75)
    	end
    end
    
    
    
    local colorNormal = Color(255,255,255,255)
    local colorProtect = Color(255,50,50,255)
    local wigcolor = colorNormal
    
    if self.protect % 4 == 0 then
    	SetImageState("image:r_legl", "", colorNormal)
    	SetImageState("image:r_legr", "", colorNormal)
    	SetImageState("image:r_broom", "", colorNormal)
    	SetImageState("image:r_torso", "", colorNormal)
    	SetImageState("image:r_arml", "", colorNormal)
    	SetImageState("image:r_armr", "", colorNormal)
    	SetImageState("image:r_skirt", "", colorNormal)
    	SetImageState("image:r_hair", "", colorNormal)
    	SetImageState("image:r_hat", "", colorNormal)
    	SetImageState("image:r_hattop", "", colorNormal)
    	wigcolor = colorNormal
    else
    	SetImageState("image:r_legl", "", colorProtect)
    	SetImageState("image:r_legr", "", colorProtect)
    	SetImageState("image:r_broom", "", colorProtect)
    	SetImageState("image:r_torso", "", colorProtect)
    	SetImageState("image:r_arml", "", colorProtect)
    	SetImageState("image:r_armr", "", colorProtect)
    	SetImageState("image:r_skirt", "", colorProtect)
    	SetImageState("image:r_hair", "", colorProtect)
    	SetImageState("image:r_hat", "", colorProtect)
    	SetImageState("image:r_hattop", "", colorProtect)
    	wigcolor = colorProtect
    end
    
    
    --
    Render("image:r_legl", self.x - 2, self.y - 4, 0 - (sin(self.timer) * 6) + self.legllerp, self.hscale, self.vscale)
    Render("image:r_legr", self.x + 2, self.y - 4, 0 + (sin(self.timer) * 6) + self.legrlerp, self.hscale, self.vscale)
    Render("image:r_broom", self.x, self.y - 2, 0 + (sin(self.timer) * 3) + self.broomlerp, self.hscale, self.vscale)
    Render("image:r_torso", self.x, self.y + 2, 0 + self.torsolerp, self.hscale, self.vscale)
    Render("image:r_arml", self.x - 3, self.y + 4, 0 + self.armllerp, self.hscale, self.vscale)
    Render("image:r_armr", self.x + 3, self.y + 4, 0 + self.armrlerp, self.hscale, self.vscale)
    Render("image:r_skirt", self.x, self.y - 2, 0 + (sin(self.timer * 3) * 8) + self.skirtlerp, self.hscale, self.vscale)
    --Render("image:hair", self.x, self.y + 12, 0 + (sin(self.timer * 6) * 6) + self.hairlerp, self.hscale, self.vscale)
    
    local n = ReimuWigNode
    local wigsizew, wigsizeh = 72 * self.hscale * 1.1, 168 * self.vscale * 1.1 
    local anchor = Vector(0,18) + Vector.fromAngle(-90+self.hairlerp) * 29 * self.hscale
    local wigflow, wigspeed, wigstrength, wigstrengthmove, wigmove = 40, 5, 60, 16, 2
    local pos = Vector(0,0)
    local prevpos = Vector(0,0)
    local prevnormal = Vector(-1,0)
    local prevang = -90 - 5 * self.wiglerp
    local ang = 0
    for i=1,n do
    	local t = i/n
    	local fxt = 1-math.pow(1-t,2)
    	local wigstr = LerpDecel(wigstrength/n,wigstrengthmove/n,math.abs(self.wiglerp))
    	ang = prevang + fxt * wigstr * sin(fxt * wigflow + self.timer * wigspeed)
    	ang = ang + wigmove * self.wiglerp * fxt
    	local pos = prevpos + wigsizeh/n * Vector.fromAngle(ang)
    	local off = (pos-prevpos).normalized
    	local normal = off:perpendicular()
    	local finalpos = Vector(player.x,player.y) + anchor + pos
    	local finalprev = Vector(player.x,player.y) + anchor + prevpos
    	
    	local vlt = finalprev - prevnormal * wigsizew
    	local vrt = finalprev + prevnormal * wigsizew
    	local vrb = finalpos  + normal * wigsizew
    	local vlb = finalpos  - normal * wigsizew
    	SetImageState("image:r_wig"..i, "", wigcolor)
    	Render4V("image:r_wig"..i,
    			vlt.x, vlt.y,0,
    			vrt.x, vrt.y,0,
    			vrb.x, vrb.y,0,
    			vlb.x, vlb.y,0)
    	
    	prevpos = pos
    	prevnormal = normal
    	prevang = ang
    end
    
    Render("image:r_hat", self.x, self.y + 14, 0 + self.hatlerp, self.hscale, self.vscale)
    Render("image:r_hattop", self.x, self.y + 17.5, 0 + (sin(self.timer) * 10) + self.hattoplerp, self.hscale, self.vscale)
        for i = 1, 4 do
        if self.sp[i] and self.sp[i][3] > 0.5 then
            Render("leaf", self.supportx + self.sp[i][1], self.supporty + self.sp[i][2], self.timer * 3)
        end
    end
end
Reimu.shoot=function(self)
    player.nextshoot = 4
    PlaySound("plst00",0.3,self.x,false)
    last=New(_editor_class["ReimuBaseShot"],self.x + 10,self.y,_)
    last=New(_editor_class["ReimuBaseShot"],self.x - 10,self.y,_)
    --[[ ]]
    
    for _=1,4 do
        if self.optionPosition[math.floor(lstg.var.power / 100)][_][1] ~= 0 or self.optionPosition[math.floor(lstg.var.power / 100)][_][2] ~= 0 then
            last=New(_editor_class["ReimuNeedleShot"],player.x + self.optionCurrentPosition[_][1] + 6,player.y + self.optionCurrentPosition[_][2],_)
            last=New(_editor_class["ReimuNeedleShot"],player.x + self.optionCurrentPosition[_][1] - 6,player.y + self.optionCurrentPosition[_][2],_)
        else
        end
    end
end
Reimu.spell=function(self)
    last=New(_editor_class["Reimu_Barrier"],self.x,self.y,_)
    player.protect = 30+70+45+60*2
    player.nextspell = 30+70+45+60*2
    PlaySound("old_cat00",0.8,self.x/1024,false)
    PlaySound("old_power1",1,self.x/256,false)
    misc.ShakeScreen(20,3)
    New(bullet_cleaner,player.x,player.y,512,30,60*2,false,false,0)
    player.collect_line = player.collect_line - 300
    last=New(_editor_class["BombEf"],self.x,self.y,self.x, self.y, {255, 100, 100})
    New(tasker, function()
        task._Wait(60*2)
        player.collect_line = player.collect_line + 300
    end)
end
Reimu.special=function(self)
end
table.insert(player_list, {'Reimu Hakurei','Reimu','Reimu'})_editor_class["testboss"]=Class(boss)
_editor_class["testboss"].cards={}
_editor_class["testboss"].name="Boss Stage 1"
_editor_class["testboss"].bgm=""
_editor_class["testboss"]._bg=nil
_editor_class["testboss"].difficulty="All"
_editor_class["testboss"].init=function(self,cards)
    boss.init(self,240,384,_editor_class["testboss"].name,cards,New(spellcard_background),_editor_class["testboss"].difficulty)
end
_tmp_sc=boss.card.New("spellnam",2,5,60,1800,{0,0,0},false)
function _tmp_sc:before()
end
function _tmp_sc:init()
    lasttask=task.New(self,function()
        task.MoveTo(0,120,60,MOVE_NORMAL)
    end)
end
function _tmp_sc:del()
end
_tmp_sc.perform=false
table.insert(_editor_class["testboss"].cards,_tmp_sc)
table.insert(_sc_table,{"testboss","spellnam",_tmp_sc,#_editor_class["testboss"].cards,false})
_tmp_sc=boss.card.New("spellname",2,5,60,1800,{0,0,0},false)
function _tmp_sc:before()
end
function _tmp_sc:init()
    lasttask=task.New(self,function()
        task.MoveTo(0,120,60,MOVE_NORMAL)
    end)
end
function _tmp_sc:del()
end
_tmp_sc.perform=false
table.insert(_editor_class["testboss"].cards,_tmp_sc)
table.insert(_sc_table,{"testboss","spellname",_tmp_sc,#_editor_class["testboss"].cards,false})
_tmp_sc=boss.card.New("spellnasdme",2,5,60,1800,{0,0,0},false)
function _tmp_sc:before()
end
function _tmp_sc:init()
    lasttask=task.New(self,function()
        task.MoveTo(0,120,60,MOVE_NORMAL)
    end)
end
function _tmp_sc:del()
end
_tmp_sc.perform=false
table.insert(_editor_class["testboss"].cards,_tmp_sc)
table.insert(_sc_table,{"testboss","spellnasdme",_tmp_sc,#_editor_class["testboss"].cards,false})
_tmp_sc=boss.card.New("spellnamxe",2,5,60,1800,{0,0,0},false)
function _tmp_sc:before()
end
function _tmp_sc:init()
    lasttask=task.New(self,function()
        task.MoveTo(0,120,60,MOVE_NORMAL)
    end)
end
function _tmp_sc:del()
end
_tmp_sc.perform=false
table.insert(_editor_class["testboss"].cards,_tmp_sc)
table.insert(_sc_table,{"testboss","spellnamxe",_tmp_sc,#_editor_class["testboss"].cards,false})
_editor_class["testboss2"]=Class(boss)
_editor_class["testboss2"].cards={}
_editor_class["testboss2"].name="Boss Stage 2"
_editor_class["testboss2"].bgm=""
_editor_class["testboss2"]._bg=nil
_editor_class["testboss2"].difficulty="All"
_editor_class["testboss2"].init=function(self,cards)
    boss.init(self,240,384,_editor_class["testboss2"].name,cards,New(spellcard_background),_editor_class["testboss2"].difficulty)
end
_tmp_sc=boss.card.New("",2,5,60,1800,{0,0,0},false)
function _tmp_sc:before()
end
function _tmp_sc:init()
    lasttask=task.New(self,function()
        task.MoveTo(0,120,60,MOVE_DECEL)
        for _=1,_infinite do
            PlaySound("tan00",0.1,self.x/256,false)
            last_list=_create_bullet_group(arrow_big,COLOR_RED,self.x,self.y,3,0,2,2,self.timer,360,false,0,true,true,0,false,self)
            for _,unit in ipairs(last_list) do
                lasttask=task.New(unit,function()
                    local self=task.GetSelf()
                    task._Wait(25)
                    do
                        local _beg_curve=0 local curve=_beg_curve  local _w_curve=-90 local _end_curve=3 * ran:Sign() local _d_w_curve=180/(30-1)
                        for _=1,30 do
                            SetV2(self,2,self.rot + curve,true,false)
                            task._Wait(1)
                            _w_curve=_w_curve+_d_w_curve curve=(_end_curve-_beg_curve)/2*sin(_w_curve)+((_end_curve+_beg_curve)/2)
                        end
                    end
                    self.navi = true
                end)
            end
            last_list=_create_bullet_group(arrow_big,COLOR_RED,self.x,self.y,3,0,2,2,-self.timer,360,false,0,true,true,0,false,self)
            for _,unit in ipairs(last_list) do
                lasttask=task.New(unit,function()
                    local self=task.GetSelf()
                    task._Wait(25)
                    do
                        local _beg_curve=0 local curve=_beg_curve  local _w_curve=-90 local _end_curve=3 * ran:Sign() local _d_w_curve=180/(30-1)
                        for _=1,30 do
                            SetV2(self,2,self.rot + curve,true,false)
                            task._Wait(1)
                            _w_curve=_w_curve+_d_w_curve curve=(_end_curve-_beg_curve)/2*sin(_w_curve)+((_end_curve+_beg_curve)/2)
                        end
                    end
                    self.navi = true
                end)
            end
            task._Wait(5)
        end
    end)
end
function _tmp_sc:del()
end
_tmp_sc.perform=false
table.insert(_editor_class["testboss2"].cards,_tmp_sc)

_tmp_sc=boss.card.New("yeahd",2,5,60,1800,{0,0,0},false)
function _tmp_sc:before()
end
function _tmp_sc:init()
    lasttask=task.New(self,function()
        task.MoveTo(0,120,60,MOVE_NORMAL)
    end)
end
function _tmp_sc:del()
end
_tmp_sc.perform=false
table.insert(_editor_class["testboss2"].cards,_tmp_sc)
table.insert(_sc_table,{"testboss2","yeahd",_tmp_sc,#_editor_class["testboss2"].cards,false})
_tmp_sc=boss.card.New("gg",2,5,60,1800,{0,0,0},false)
function _tmp_sc:before()
end
function _tmp_sc:init()
    lasttask=task.New(self,function()
        task.MoveTo(0,120,60,MOVE_NORMAL)
    end)
end
function _tmp_sc:del()
end
_tmp_sc.perform=false
table.insert(_editor_class["testboss2"].cards,_tmp_sc)
table.insert(_sc_table,{"testboss2","gg",_tmp_sc,#_editor_class["testboss2"].cards,false})
_tmp_sc=boss.card.New("yeahx",2,5,60,1800,{0,0,0},false)
function _tmp_sc:before()
end
function _tmp_sc:init()
    lasttask=task.New(self,function()
        task.MoveTo(0,120,60,MOVE_NORMAL)
    end)
end
function _tmp_sc:del()
end
_tmp_sc.perform=false
table.insert(_editor_class["testboss2"].cards,_tmp_sc)
table.insert(_sc_table,{"testboss2","yeahx",_tmp_sc,#_editor_class["testboss2"].cards,false})
_tmp_sc=boss.card.New("sfgs",2,5,60,1800,{0,0,0},false)
function _tmp_sc:before()
end
function _tmp_sc:init()
    lasttask=task.New(self,function()
        task.MoveTo(0,120,60,MOVE_NORMAL)
    end)
end
function _tmp_sc:del()
end
_tmp_sc.perform=false
table.insert(_editor_class["testboss2"].cards,_tmp_sc)
table.insert(_sc_table,{"testboss2","sfgs",_tmp_sc,#_editor_class["testboss2"].cards,false})
_tmp_sc=boss.card.New("fff",2,5,60,1800,{0,0,0},false)
function _tmp_sc:before()
end
function _tmp_sc:init()
    lasttask=task.New(self,function()
        task.MoveTo(0,120,60,MOVE_NORMAL)
    end)
end
function _tmp_sc:del()
end
_tmp_sc.perform=false
table.insert(_editor_class["testboss2"].cards,_tmp_sc)
table.insert(_sc_table,{"testboss2","fff",_tmp_sc,#_editor_class["testboss2"].cards,false})
_tmp_sc=boss.card.New("sfgsas",2,5,60,1800,{0,0,0},false)
function _tmp_sc:before()
end
function _tmp_sc:init()
    lasttask=task.New(self,function()
        task.MoveTo(0,120,60,MOVE_NORMAL)
    end)
end
function _tmp_sc:del()
end
_tmp_sc.perform=false
table.insert(_editor_class["testboss2"].cards,_tmp_sc)
table.insert(_sc_table,{"testboss2","sfgsas",_tmp_sc,#_editor_class["testboss2"].cards,false})
_tmp_sc=boss.card.New("sfgsasr",2,5,60,1800,{0,0,0},false)
function _tmp_sc:before()
end
function _tmp_sc:init()
    lasttask=task.New(self,function()
        task.MoveTo(0,120,60,MOVE_NORMAL)
    end)
end
function _tmp_sc:del()
end
_tmp_sc.perform=false
table.insert(_editor_class["testboss2"].cards,_tmp_sc)
table.insert(_sc_table,{"testboss2","sfgsasr",_tmp_sc,#_editor_class["testboss2"].cards,false})
-- Loading Screen
    stage_load = stage.New("loadscreen", false, true)
    function stage_load:init()
        last=New(_editor_class["LoadManager"],0,0,_)
    end
    function stage_load:frame()
        task.Do(self)
    end

-- Title Screen
    stage_init = stage.New("menu", true, true)
    function stage_init:init()
        checker_up = coroutine.create(MenuInputChecker)
        checker_down = coroutine.create(MenuInputChecker)
        checker_left = coroutine.create(MenuInputChecker)
        checker_right = coroutine.create(MenuInputChecker)
        checker_c = coroutine.create(MenuInputChecker)
        lstg.var.rep_player = "Reimu"
        lstg.var.player_name = "Reimu"
        last=New(_editor_class["MainMenuBG"],0,0,_)
        last=New(_editor_class["MainMenuMain"],0,0,_)
    end
    function stage_init:frame()
        _, is_up_held = coroutine.resume(checker_up, "up")
        _, is_down_held = coroutine.resume(checker_down, "down")
        _, is_left_held = coroutine.resume(checker_left, "left")
        _, is_right_held = coroutine.resume(checker_right, "right")
        _, is_c_held = coroutine.resume(checker_c, "special")
        task.Do(self)
    end

stage.group.New('menu',{},"GameGroup",{lifeleft=7,power=400,faith=50000,bomb=3},true,1)
stage.group.AddStage('GameGroup','1@GameGroup',{lifeleft=7,power=400,faith=50000,bomb=3},true)
stage.group.DefStageFunc('1@GameGroup','init',function(self)
    _init_item(self)
    difficulty=self.group.difficulty
    New(mask_fader,'open')
    if jstg then jstg.CreatePlayers() else New(_G[lstg.var.player_name]) end
    lasttask=task.New(self,function()
        LoadMusic('spellcard','THlib\\music\\spellcard.ogg',75,0xc36e80/44100/4)
        SetWorldUEX(screen.width/2, screen.height/2, 448, 448, 32, 32)
        lstg.var.bomb = 7
        lstg.var.spell = 7
        for i, m in ipairs(lstg.ListMonitor()) do
            Print('monitor ' .. i .. ':')
            for k, v in pairs(m) do
                Print(k, '=', v)
            end
        end
        New(_editor_class["temple_background"] or temple_background)
        task._Wait(1)
        last=New(_editor_class["HUDManager"],self.x,self.y,_)
        last=New(_editor_class["ShotShadows"],self.x,self.y,_)
        task._Wait(60)
        local _boss_wait=true
        local _ref=New(_editor_class["testboss2"],_editor_class["testboss2"].cards)
        last=_ref
        if _boss_wait then while IsValid(_ref) do task.Wait() end end
    end)
    task.New(self,function()
        while coroutine.status(self.task[1])~='dead' do task.Wait() end
        stage.group.FinishReplay()
        New(mask_fader,'close')
        task.New(self,function()
            local _,bgm=EnumRes('bgm')
            for i=1,30 do
                for _,v in pairs(bgm) do
                    if GetMusicState(v)=='playing' then
                        SetBGMVolume(v,1-i/30)
                    end
                end
                task.Wait()
            end
        end)
        task.Wait(30)
        stage.group.FinishStage()
    end)
end)
