-- 获取编辑器提供的参数，覆盖部分设置
-- 警告：该功能可能会被恶意利用，请考虑在正式项目发行版中移除

---@param name string
---@param str string
---@param env table
---@return fun()
local function load_as_sandbox(name, str, env)
	local available = true
	local function read_callback()
		if available then
			available = false
			return str
		else
			return nil
		end
	end
	local chunk, message = load(read_callback, name)
	if chunk then
		setfenv(chunk, env)
		return chunk
	else
		print(tostring(message))
		return function() end
	end
end

--- 从命令行选项中找看起来像编辑器参数的
---@return string|nil
local function find_editor_setting()
	for _, v in ipairs(lstg.args) do
		if string.find(v, "setting.mod") then -- 编辑器参数特征，包含 setting.mod
			return v
		end
	end
	return nil
end

local editor_setting_text = find_editor_setting()
local editor_setting = {}
if editor_setting_text then
	local sandbox_environment = { setting = editor_setting }
	load_as_sandbox("editor_setting", editor_setting_text, sandbox_environment)()
	-- 受信任的全局变量
	if sandbox_environment.start_game then
		start_game = true
	end
	if sandbox_environment.is_debug then
		is_debug = true
	end
	if sandbox_environment.cheat then
		cheat = true
	end
end

-- 加载包

lstg.FileManager.AddSearchPath("packages/luasocket/")
lstg.FileManager.AddSearchPath("packages/thlib/")

-- 将 lstg 库的方法导入到全局（很神秘的设计）

lstg.DoFile("lib/Lapi.lua")

-- 按键常量

lstg.DoFile("lib/Lkeycode.lua")

-- 游戏设置

lstg.DoFile("lib/Luserdata.lua")
lstg.DoFile("lib/Lsetting.lua")

if setting.showcfg == nil or setting.showcfg == true then -- 应该是给外部设置工具用的，比如龙隐谈有单独的设置工具
	-- 重新加载配置
	loadConfigure()
	saveConfigure()
end

for k, v in pairs(editor_setting) do
	setting[k] = v
end

setting.last_mod = setting.mod
if not start_game then
	setting.mod = "launcher"
	--setting.resx = 480
	--setting.resy = 640
	--setting.windowed = true
end

-- 按需加载启动器包

lstg.FileManager.CreateDirectory("mod")
if setting.mod ~= 'launcher' then
	local zip_path = string.format("mod/%s.zip", setting.mod) -- 压缩包文件
	local dir_path = string.format("mod/%s/", setting.mod) -- 文件夹模式的搜索路径
	local dir_root_script = string.format("mod/%s/root.lua", setting.mod) -- 文件夹模式下，这里应该有个 root.lua 脚本
	if lstg.FileManager.FileExist(zip_path) then
		lstg.LoadPack(zip_path) -- 有压缩包则加载压缩包
	elseif lstg.FileManager.FileExist(dir_root_script) then
		lstg.FileManager.AddSearchPath(dir_path) -- 没压缩包但是有文件夹和 root.lua 就添加搜索路径
	end
else
	if not lstg.FileManager.FileExist('launcher.lua') then
		--尝试加载启动器包
		if lstg.FileManager.FileExist('mod/launcher.zip') then
			lstg.LoadPack('mod/launcher.zip')--正常加载启动器
		else
			--找不到启动器包，尝试使用data.zip里面的启动器
		end
	else
		--使用裸露的启动器脚本
	end
end

-- 引擎初始化设置

lstg.SetSplash(false)
lstg.SetTitle(setting.mod)
lstg.SetWindowed(setting.windowed)
lstg.SetResolution(setting.resx,setting.resy)
lstg.SetFPS(60)
lstg.SetVsync(setting.vsync)
lstg.SetSEVolume(setting.sevolume/100)
lstg.SetBGMVolume(setting.bgmvolume/100)
